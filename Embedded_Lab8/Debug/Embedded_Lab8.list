
Embedded_Lab8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006894  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fbc  08006a1c  08006a1c  00016a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099d8  080099d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080099d8  080099d8  000199d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099e0  080099e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099e0  080099e0  000199e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099e4  080099e4  000199e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080099e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000003e8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003fc  200003fc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f47f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f76  00000000  00000000  0003f4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001648  00000000  00000000  00043440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  00044a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000261f2  00000000  00000000  00045f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4af  00000000  00000000  0006c13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfab4  00000000  00000000  0008b5e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016b09d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005be8  00000000  00000000  0016b0f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006a04 	.word	0x08006a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006a04 	.word	0x08006a04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b084      	sub	sp, #16
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004c6:	463b      	mov	r3, r7
 80004c8:	2200      	movs	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
 80004cc:	605a      	str	r2, [r3, #4]
 80004ce:	609a      	str	r2, [r3, #8]
 80004d0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004d2:	4b3d      	ldr	r3, [pc, #244]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004d4:	4a3d      	ldr	r2, [pc, #244]	; (80005cc <MX_ADC1_Init+0x10c>)
 80004d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004d8:	4b3b      	ldr	r3, [pc, #236]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004da:	2200      	movs	r2, #0
 80004dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80004e4:	4b38      	ldr	r3, [pc, #224]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f0:	4b35      	ldr	r3, [pc, #212]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f8:	4b33      	ldr	r3, [pc, #204]	; (80005c8 <MX_ADC1_Init+0x108>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fe:	4b32      	ldr	r3, [pc, #200]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000500:	4a33      	ldr	r2, [pc, #204]	; (80005d0 <MX_ADC1_Init+0x110>)
 8000502:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000504:	4b30      	ldr	r3, [pc, #192]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800050a:	4b2f      	ldr	r3, [pc, #188]	; (80005c8 <MX_ADC1_Init+0x108>)
 800050c:	2205      	movs	r2, #5
 800050e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000510:	4b2d      	ldr	r3, [pc, #180]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000518:	4b2b      	ldr	r3, [pc, #172]	; (80005c8 <MX_ADC1_Init+0x108>)
 800051a:	2201      	movs	r2, #1
 800051c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800051e:	482a      	ldr	r0, [pc, #168]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000520:	f001 fe68 	bl	80021f4 <HAL_ADC_Init>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800052a:	f001 f92d 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800052e:	2308      	movs	r3, #8
 8000530:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000532:	2301      	movs	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000536:	2300      	movs	r3, #0
 8000538:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800053a:	463b      	mov	r3, r7
 800053c:	4619      	mov	r1, r3
 800053e:	4822      	ldr	r0, [pc, #136]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000540:	f001 ffca 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800054a:	f001 f91d 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800054e:	2309      	movs	r3, #9
 8000550:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000552:	2302      	movs	r3, #2
 8000554:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	4619      	mov	r1, r3
 800055a:	481b      	ldr	r0, [pc, #108]	; (80005c8 <MX_ADC1_Init+0x108>)
 800055c:	f001 ffbc 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000566:	f001 f90f 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800056a:	230a      	movs	r3, #10
 800056c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800056e:	2303      	movs	r3, #3
 8000570:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000572:	463b      	mov	r3, r7
 8000574:	4619      	mov	r1, r3
 8000576:	4814      	ldr	r0, [pc, #80]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000578:	f001 ffae 	bl	80024d8 <HAL_ADC_ConfigChannel>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000582:	f001 f901 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000586:	230b      	movs	r3, #11
 8000588:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800058a:	2304      	movs	r3, #4
 800058c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800058e:	463b      	mov	r3, r7
 8000590:	4619      	mov	r1, r3
 8000592:	480d      	ldr	r0, [pc, #52]	; (80005c8 <MX_ADC1_Init+0x108>)
 8000594:	f001 ffa0 	bl	80024d8 <HAL_ADC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800059e:	f001 f8f3 	bl	8001788 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80005a2:	230c      	movs	r3, #12
 80005a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80005a6:	2305      	movs	r3, #5
 80005a8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005aa:	463b      	mov	r3, r7
 80005ac:	4619      	mov	r1, r3
 80005ae:	4806      	ldr	r0, [pc, #24]	; (80005c8 <MX_ADC1_Init+0x108>)
 80005b0:	f001 ff92 	bl	80024d8 <HAL_ADC_ConfigChannel>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80005ba:	f001 f8e5 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005be:	bf00      	nop
 80005c0:	3710      	adds	r7, #16
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000048 	.word	0x20000048
 80005cc:	40012000 	.word	0x40012000
 80005d0:	0f000001 	.word	0x0f000001

080005d4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	; 0x28
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005dc:	f107 0314 	add.w	r3, r7, #20
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a3c      	ldr	r2, [pc, #240]	; (80006e4 <HAL_ADC_MspInit+0x110>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d171      	bne.n	80006da <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 80005fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fe:	4a3a      	ldr	r2, [pc, #232]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000604:	6453      	str	r3, [r2, #68]	; 0x44
 8000606:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800060a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 800061c:	f043 0304 	orr.w	r3, r3, #4
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0304 	and.w	r3, r3, #4
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2c      	ldr	r2, [pc, #176]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b2a      	ldr	r3, [pc, #168]	; (80006e8 <HAL_ADC_MspInit+0x114>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800064a:	2307      	movs	r3, #7
 800064c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800064e:	2303      	movs	r3, #3
 8000650:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000656:	f107 0314 	add.w	r3, r7, #20
 800065a:	4619      	mov	r1, r3
 800065c:	4823      	ldr	r0, [pc, #140]	; (80006ec <HAL_ADC_MspInit+0x118>)
 800065e:	f002 feef 	bl	8003440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000662:	2303      	movs	r3, #3
 8000664:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000666:	2303      	movs	r3, #3
 8000668:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	4619      	mov	r1, r3
 8000674:	481e      	ldr	r0, [pc, #120]	; (80006f0 <HAL_ADC_MspInit+0x11c>)
 8000676:	f002 fee3 	bl	8003440 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800067a:	4b1e      	ldr	r3, [pc, #120]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 800067c:	4a1e      	ldr	r2, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x124>)
 800067e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 8000682:	2200      	movs	r2, #0
 8000684:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000692:	4b18      	ldr	r3, [pc, #96]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 8000694:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000698:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006a2:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006c0:	f002 fabc 	bl	8002c3c <HAL_DMA_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006ca:	f001 f85d 	bl	8001788 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006d2:	639a      	str	r2, [r3, #56]	; 0x38
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_ADC_MspInit+0x120>)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40012000 	.word	0x40012000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	20000090 	.word	0x20000090
 80006f8:	40026410 	.word	0x40026410

080006fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <MX_DMA_Init+0x3c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	4a0b      	ldr	r2, [pc, #44]	; (8000738 <MX_DMA_Init+0x3c>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000710:	6313      	str	r3, [r2, #48]	; 0x30
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <MX_DMA_Init+0x3c>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800071e:	2200      	movs	r2, #0
 8000720:	2100      	movs	r1, #0
 8000722:	2038      	movs	r0, #56	; 0x38
 8000724:	f002 fa53 	bl	8002bce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000728:	2038      	movs	r0, #56	; 0x38
 800072a:	f002 fa6c 	bl	8002c06 <HAL_NVIC_EnableIRQ>

}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800

0800073c <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08e      	sub	sp, #56	; 0x38
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
 8000752:	615a      	str	r2, [r3, #20]
 8000754:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
 8000764:	615a      	str	r2, [r3, #20]
 8000766:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000768:	4b2f      	ldr	r3, [pc, #188]	; (8000828 <MX_FSMC_Init+0xec>)
 800076a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800076e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_FSMC_Init+0xec>)
 8000772:	4a2e      	ldr	r2, [pc, #184]	; (800082c <MX_FSMC_Init+0xf0>)
 8000774:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000776:	4b2c      	ldr	r3, [pc, #176]	; (8000828 <MX_FSMC_Init+0xec>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800077c:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <MX_FSMC_Init+0xec>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000782:	4b29      	ldr	r3, [pc, #164]	; (8000828 <MX_FSMC_Init+0xec>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000788:	4b27      	ldr	r3, [pc, #156]	; (8000828 <MX_FSMC_Init+0xec>)
 800078a:	2210      	movs	r2, #16
 800078c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800078e:	4b26      	ldr	r3, [pc, #152]	; (8000828 <MX_FSMC_Init+0xec>)
 8000790:	2200      	movs	r2, #0
 8000792:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000794:	4b24      	ldr	r3, [pc, #144]	; (8000828 <MX_FSMC_Init+0xec>)
 8000796:	2200      	movs	r2, #0
 8000798:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <MX_FSMC_Init+0xec>)
 800079c:	2200      	movs	r2, #0
 800079e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80007a0:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_FSMC_Init+0xec>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80007a6:	4b20      	ldr	r3, [pc, #128]	; (8000828 <MX_FSMC_Init+0xec>)
 80007a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80007ac:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_FSMC_Init+0xec>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_FSMC_Init+0xec>)
 80007b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007ba:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_FSMC_Init+0xec>)
 80007be:	2200      	movs	r2, #0
 80007c0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_FSMC_Init+0xec>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_FSMC_Init+0xec>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80007ce:	230f      	movs	r3, #15
 80007d0:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80007d2:	230f      	movs	r3, #15
 80007d4:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80007d6:	233c      	movs	r3, #60	; 0x3c
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80007de:	2310      	movs	r3, #16
 80007e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80007e2:	2311      	movs	r3, #17
 80007e4:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80007e6:	2300      	movs	r3, #0
 80007e8:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80007ea:	2308      	movs	r3, #8
 80007ec:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80007ee:	230f      	movs	r3, #15
 80007f0:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80007f2:	2309      	movs	r3, #9
 80007f4:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80007fa:	2310      	movs	r3, #16
 80007fc:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80007fe:	2311      	movs	r3, #17
 8000800:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000806:	463a      	mov	r2, r7
 8000808:	f107 031c 	add.w	r3, r7, #28
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_FSMC_Init+0xec>)
 8000810:	f004 f82c 	bl	800486c <HAL_SRAM_Init>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 800081a:	f000 ffb5 	bl	8001788 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800081e:	bf00      	nop
 8000820:	3738      	adds	r7, #56	; 0x38
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	200000f0 	.word	0x200000f0
 800082c:	a0000104 	.word	0xa0000104

08000830 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8000830:	b580      	push	{r7, lr}
 8000832:	b086      	sub	sp, #24
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	2200      	movs	r2, #0
 800083a:	601a      	str	r2, [r3, #0]
 800083c:	605a      	str	r2, [r3, #4]
 800083e:	609a      	str	r2, [r3, #8]
 8000840:	60da      	str	r2, [r3, #12]
 8000842:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_FSMC_MspInit+0x88>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d131      	bne.n	80008b0 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 800084c:	4b1a      	ldr	r3, [pc, #104]	; (80008b8 <HAL_FSMC_MspInit+0x88>)
 800084e:	2201      	movs	r2, #1
 8000850:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b19      	ldr	r3, [pc, #100]	; (80008bc <HAL_FSMC_MspInit+0x8c>)
 8000858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800085a:	4a18      	ldr	r2, [pc, #96]	; (80008bc <HAL_FSMC_MspInit+0x8c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6393      	str	r3, [r2, #56]	; 0x38
 8000862:	4b16      	ldr	r3, [pc, #88]	; (80008bc <HAL_FSMC_MspInit+0x8c>)
 8000864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800086e:	f64f 7388 	movw	r3, #65416	; 0xff88
 8000872:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000880:	230c      	movs	r3, #12
 8000882:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	4619      	mov	r1, r3
 8000888:	480d      	ldr	r0, [pc, #52]	; (80008c0 <HAL_FSMC_MspInit+0x90>)
 800088a:	f002 fdd9 	bl	8003440 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800088e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000892:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000894:	2302      	movs	r3, #2
 8000896:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800089c:	2303      	movs	r3, #3
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80008a0:	230c      	movs	r3, #12
 80008a2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008a4:	1d3b      	adds	r3, r7, #4
 80008a6:	4619      	mov	r1, r3
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <HAL_FSMC_MspInit+0x94>)
 80008aa:	f002 fdc9 	bl	8003440 <HAL_GPIO_Init>
 80008ae:	e000      	b.n	80008b2 <HAL_FSMC_MspInit+0x82>
    return;
 80008b0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80008b2:	3718      	adds	r7, #24
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000030 	.word	0x20000030
 80008bc:	40023800 	.word	0x40023800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	40020c00 	.word	0x40020c00

080008c8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80008d0:	f7ff ffae 	bl	8000830 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80008d4:	bf00      	nop
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08e      	sub	sp, #56	; 0x38
 80008e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
 80008ee:	60da      	str	r2, [r3, #12]
 80008f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
 80008f6:	4b8f      	ldr	r3, [pc, #572]	; (8000b34 <MX_GPIO_Init+0x258>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a8e      	ldr	r2, [pc, #568]	; (8000b34 <MX_GPIO_Init+0x258>)
 80008fc:	f043 0310 	orr.w	r3, r3, #16
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b8c      	ldr	r3, [pc, #560]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0310 	and.w	r3, r3, #16
 800090a:	623b      	str	r3, [r7, #32]
 800090c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
 8000912:	4b88      	ldr	r3, [pc, #544]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a87      	ldr	r2, [pc, #540]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000918:	f043 0304 	orr.w	r3, r3, #4
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b85      	ldr	r3, [pc, #532]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0304 	and.w	r3, r3, #4
 8000926:	61fb      	str	r3, [r7, #28]
 8000928:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	4b81      	ldr	r3, [pc, #516]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a80      	ldr	r2, [pc, #512]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000934:	f043 0320 	orr.w	r3, r3, #32
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b7e      	ldr	r3, [pc, #504]	; (8000b34 <MX_GPIO_Init+0x258>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0320 	and.w	r3, r3, #32
 8000942:	61bb      	str	r3, [r7, #24]
 8000944:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
 800094a:	4b7a      	ldr	r3, [pc, #488]	; (8000b34 <MX_GPIO_Init+0x258>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a79      	ldr	r2, [pc, #484]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b77      	ldr	r3, [pc, #476]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800095e:	617b      	str	r3, [r7, #20]
 8000960:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b73      	ldr	r3, [pc, #460]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a72      	ldr	r2, [pc, #456]	; (8000b34 <MX_GPIO_Init+0x258>)
 800096c:	f043 0301 	orr.w	r3, r3, #1
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b70      	ldr	r3, [pc, #448]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0301 	and.w	r3, r3, #1
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b6c      	ldr	r3, [pc, #432]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	4a6b      	ldr	r2, [pc, #428]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	6313      	str	r3, [r2, #48]	; 0x30
 800098e:	4b69      	ldr	r3, [pc, #420]	; (8000b34 <MX_GPIO_Init+0x258>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	f003 0302 	and.w	r3, r3, #2
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800099a:	2300      	movs	r3, #0
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b65      	ldr	r3, [pc, #404]	; (8000b34 <MX_GPIO_Init+0x258>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	4a64      	ldr	r2, [pc, #400]	; (8000b34 <MX_GPIO_Init+0x258>)
 80009a4:	f043 0308 	orr.w	r3, r3, #8
 80009a8:	6313      	str	r3, [r2, #48]	; 0x30
 80009aa:	4b62      	ldr	r3, [pc, #392]	; (8000b34 <MX_GPIO_Init+0x258>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	f003 0308 	and.w	r3, r3, #8
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b5e      	ldr	r3, [pc, #376]	; (8000b34 <MX_GPIO_Init+0x258>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a5d      	ldr	r2, [pc, #372]	; (8000b34 <MX_GPIO_Init+0x258>)
 80009c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <MX_GPIO_Init+0x258>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2170      	movs	r1, #112	; 0x70
 80009d6:	4858      	ldr	r0, [pc, #352]	; (8000b38 <MX_GPIO_Init+0x25c>)
 80009d8:	f002 fee6 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FSMC_RES_Pin|T_MOSI_Pin, GPIO_PIN_RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 80009e2:	4856      	ldr	r0, [pc, #344]	; (8000b3c <MX_GPIO_Init+0x260>)
 80009e4:	f002 fee0 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009ee:	4854      	ldr	r0, [pc, #336]	; (8000b40 <MX_GPIO_Init+0x264>)
 80009f0:	f002 feda 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin, GPIO_PIN_RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80009fa:	4852      	ldr	r0, [pc, #328]	; (8000b44 <MX_GPIO_Init+0x268>)
 80009fc:	f002 fed4 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a06:	4850      	ldr	r0, [pc, #320]	; (8000b48 <MX_GPIO_Init+0x26c>)
 8000a08:	f002 fece 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	2108      	movs	r1, #8
 8000a10:	484e      	ldr	r0, [pc, #312]	; (8000b4c <MX_GPIO_Init+0x270>)
 8000a12:	f002 fec9 	bl	80037a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 8000a16:	2370      	movs	r3, #112	; 0x70
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4842      	ldr	r0, [pc, #264]	; (8000b38 <MX_GPIO_Init+0x25c>)
 8000a2e:	f002 fd07 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin|T_MOSI_Pin;
 8000a32:	f44f 5308 	mov.w	r3, #8704	; 0x2200
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a40:	2300      	movs	r3, #0
 8000a42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a48:	4619      	mov	r1, r3
 8000a4a:	483c      	ldr	r0, [pc, #240]	; (8000b3c <MX_GPIO_Init+0x260>)
 8000a4c:	f002 fcf8 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_BUSY_Pin;
 8000a50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ESP12_BUSY_GPIO_Port, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4836      	ldr	r0, [pc, #216]	; (8000b40 <MX_GPIO_Init+0x264>)
 8000a66:	f002 fceb 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ESP12_PWR_Pin;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ESP12_PWR_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a80:	4619      	mov	r1, r3
 8000a82:	482f      	ldr	r0, [pc, #188]	; (8000b40 <MX_GPIO_Init+0x264>)
 8000a84:	f002 fcdc 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8000a88:	23c0      	movs	r3, #192	; 0xc0
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482b      	ldr	r0, [pc, #172]	; (8000b48 <MX_GPIO_Init+0x26c>)
 8000a9c:	f002 fcd0 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 8000aa0:	2330      	movs	r3, #48	; 0x30
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4822      	ldr	r0, [pc, #136]	; (8000b3c <MX_GPIO_Init+0x260>)
 8000ab4:	f002 fcc4 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin|T_CS_Pin|T_CLK_Pin;
 8000ab8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ace:	4619      	mov	r1, r3
 8000ad0:	481c      	ldr	r0, [pc, #112]	; (8000b44 <MX_GPIO_Init+0x268>)
 8000ad2:	f002 fcb5 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = T_PEN_Pin|T_MISO_Pin;
 8000ad6:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8000ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000adc:	2300      	movs	r3, #0
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4814      	ldr	r0, [pc, #80]	; (8000b3c <MX_GPIO_Init+0x260>)
 8000aec:	f002 fca8 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 8000af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2300      	movs	r3, #0
 8000b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	480f      	ldr	r0, [pc, #60]	; (8000b48 <MX_GPIO_Init+0x26c>)
 8000b0a:	f002 fc99 	bl	8003440 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000b0e:	2308      	movs	r3, #8
 8000b10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b22:	4619      	mov	r1, r3
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_GPIO_Init+0x270>)
 8000b26:	f002 fc8b 	bl	8003440 <HAL_GPIO_Init>

}
 8000b2a:	bf00      	nop
 8000b2c:	3738      	adds	r7, #56	; 0x38
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40023800 	.word	0x40023800
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	40020800 	.word	0x40020800
 8000b40:	40021400 	.word	0x40021400
 8000b44:	40021800 	.word	0x40021800
 8000b48:	40020000 	.word	0x40020000
 8000b4c:	40020c00 	.word	0x40020c00

08000b50 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b56:	4a13      	ldr	r2, [pc, #76]	; (8000ba4 <MX_I2C1_Init+0x54>)
 8000b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b5a:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b5c:	4a12      	ldr	r2, [pc, #72]	; (8000ba8 <MX_I2C1_Init+0x58>)
 8000b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b60:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b80:	4b07      	ldr	r3, [pc, #28]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x50>)
 8000b8e:	f002 fe25 	bl	80037dc <HAL_I2C_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b98:	f000 fdf6 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000140 	.word	0x20000140
 8000ba4:	40005400 	.word	0x40005400
 8000ba8:	000186a0 	.word	0x000186a0

08000bac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_I2C_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12b      	bne.n	8000c26 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bea:	23c0      	movs	r3, #192	; 0xc0
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bee:	2312      	movs	r3, #18
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfa:	2304      	movs	r3, #4
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	480c      	ldr	r0, [pc, #48]	; (8000c38 <HAL_I2C_MspInit+0x8c>)
 8000c06:	f002 fc1b 	bl	8003440 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c12:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c18:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1a:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c26:	bf00      	nop
 8000c28:	3728      	adds	r7, #40	; 0x28
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 8000c46:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <LCD_WR_REG+0x1c>)
 8000c48:	88fb      	ldrh	r3, [r7, #6]
 8000c4a:	8013      	strh	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	370c      	adds	r7, #12
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	600ffffe 	.word	0x600ffffe

08000c5c <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <LCD_WR_DATA+0x1c>)
 8000c68:	88fb      	ldrh	r3, [r7, #6]
 8000c6a:	8053      	strh	r3, [r2, #2]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	600ffffe 	.word	0x600ffffe

08000c7c <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <LCD_RD_DATA+0x20>)
 8000c84:	885b      	ldrh	r3, [r3, #2]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000c8a:	88fb      	ldrh	r3, [r7, #6]
 8000c8c:	b29b      	uxth	r3, r3
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	600ffffe 	.word	0x600ffffe

08000ca0 <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	4611      	mov	r1, r2
 8000cac:	461a      	mov	r2, r3
 8000cae:	4623      	mov	r3, r4
 8000cb0:	80fb      	strh	r3, [r7, #6]
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80bb      	strh	r3, [r7, #4]
 8000cb6:	460b      	mov	r3, r1
 8000cb8:	807b      	strh	r3, [r7, #2]
 8000cba:	4613      	mov	r3, r2
 8000cbc:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 8000cbe:	202a      	movs	r0, #42	; 0x2a
 8000cc0:	f7ff ffbc 	bl	8000c3c <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	0a1b      	lsrs	r3, r3, #8
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ffc6 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	b29b      	uxth	r3, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f7ff ffc0 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	b29b      	uxth	r3, r3
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff ffba 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8000ce8:	887b      	ldrh	r3, [r7, #2]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	b29b      	uxth	r3, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff ffb4 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8000cf4:	202b      	movs	r0, #43	; 0x2b
 8000cf6:	f7ff ffa1 	bl	8000c3c <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8000cfa:	88bb      	ldrh	r3, [r7, #4]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4618      	mov	r0, r3
 8000d02:	f7ff ffab 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8000d06:	88bb      	ldrh	r3, [r7, #4]
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	b29b      	uxth	r3, r3
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ffa5 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 8000d12:	883b      	ldrh	r3, [r7, #0]
 8000d14:	0a1b      	lsrs	r3, r3, #8
 8000d16:	b29b      	uxth	r3, r3
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff9f 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 8000d1e:	883b      	ldrh	r3, [r7, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	b29b      	uxth	r3, r3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f7ff ff99 	bl	8000c5c <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 8000d2a:	202c      	movs	r0, #44	; 0x2c
 8000d2c:	f7ff ff86 	bl	8000c3c <LCD_WR_REG>
}
 8000d30:	bf00      	nop
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd90      	pop	{r4, r7, pc}

08000d38 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	80fb      	strh	r3, [r7, #6]
 8000d42:	460b      	mov	r3, r1
 8000d44:	80bb      	strh	r3, [r7, #4]
 8000d46:	4613      	mov	r3, r2
 8000d48:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 8000d4a:	88bb      	ldrh	r3, [r7, #4]
 8000d4c:	88fa      	ldrh	r2, [r7, #6]
 8000d4e:	88b9      	ldrh	r1, [r7, #4]
 8000d50:	88f8      	ldrh	r0, [r7, #6]
 8000d52:	f7ff ffa5 	bl	8000ca0 <lcd_AddressSet>
	LCD_WR_DATA(color);
 8000d56:	887b      	ldrh	r3, [r7, #2]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff7f 	bl	8000c5c <LCD_WR_DATA>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <lcd_ShowChar>:
	lcd_DrawLine(x1,y2,x2,y2,color);
	lcd_DrawLine(x2,y1,x2,y2,color);
}

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b087      	sub	sp, #28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	4608      	mov	r0, r1
 8000d72:	4611      	mov	r1, r2
 8000d74:	461a      	mov	r2, r3
 8000d76:	4623      	mov	r3, r4
 8000d78:	80fb      	strh	r3, [r7, #6]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	80bb      	strh	r3, [r7, #4]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	70fb      	strb	r3, [r7, #3]
 8000d82:	4613      	mov	r3, r2
 8000d84:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 8000d8e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000d92:	085b      	lsrs	r3, r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8000d96:	7bfb      	ldrb	r3, [r7, #15]
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
 8000da0:	f003 0307 	and.w	r3, r3, #7
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bf14      	ite	ne
 8000daa:	2301      	movne	r3, #1
 8000dac:	2300      	moveq	r3, #0
 8000dae:	b2db      	uxtb	r3, r3
 8000db0:	4413      	add	r3, r2
 8000db2:	b29a      	uxth	r2, r3
 8000db4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000db8:	b29b      	uxth	r3, r3
 8000dba:	fb12 f303 	smulbb	r3, r2, r3
 8000dbe:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	3b20      	subs	r3, #32
 8000dc4:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	b29a      	uxth	r2, r3
 8000dca:	88fb      	ldrh	r3, [r7, #6]
 8000dcc:	4413      	add	r3, r2
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	b29c      	uxth	r4, r3
 8000dd4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	88bb      	ldrh	r3, [r7, #4]
 8000ddc:	4413      	add	r3, r2
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	3b01      	subs	r3, #1
 8000de2:	b29b      	uxth	r3, r3
 8000de4:	88b9      	ldrh	r1, [r7, #4]
 8000de6:	88f8      	ldrh	r0, [r7, #6]
 8000de8:	4622      	mov	r2, r4
 8000dea:	f7ff ff59 	bl	8000ca0 <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	827b      	strh	r3, [r7, #18]
 8000df2:	e07a      	b.n	8000eea <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 8000df4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000df8:	2b0c      	cmp	r3, #12
 8000dfa:	d028      	beq.n	8000e4e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 8000dfc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e00:	2b10      	cmp	r3, #16
 8000e02:	d108      	bne.n	8000e16 <lcd_ShowChar+0xae>
 8000e04:	78fa      	ldrb	r2, [r7, #3]
 8000e06:	8a7b      	ldrh	r3, [r7, #18]
 8000e08:	493c      	ldr	r1, [pc, #240]	; (8000efc <lcd_ShowChar+0x194>)
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	440a      	add	r2, r1
 8000e0e:	4413      	add	r3, r2
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	75fb      	strb	r3, [r7, #23]
 8000e14:	e01b      	b.n	8000e4e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 8000e16:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e1a:	2b18      	cmp	r3, #24
 8000e1c:	d10b      	bne.n	8000e36 <lcd_ShowChar+0xce>
 8000e1e:	78fa      	ldrb	r2, [r7, #3]
 8000e20:	8a79      	ldrh	r1, [r7, #18]
 8000e22:	4837      	ldr	r0, [pc, #220]	; (8000f00 <lcd_ShowChar+0x198>)
 8000e24:	4613      	mov	r3, r2
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	4413      	add	r3, r2
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	4403      	add	r3, r0
 8000e2e:	440b      	add	r3, r1
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	75fb      	strb	r3, [r7, #23]
 8000e34:	e00b      	b.n	8000e4e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8000e36:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e3a:	2b20      	cmp	r3, #32
 8000e3c:	d15a      	bne.n	8000ef4 <lcd_ShowChar+0x18c>
 8000e3e:	78fa      	ldrb	r2, [r7, #3]
 8000e40:	8a7b      	ldrh	r3, [r7, #18]
 8000e42:	4930      	ldr	r1, [pc, #192]	; (8000f04 <lcd_ShowChar+0x19c>)
 8000e44:	0192      	lsls	r2, r2, #6
 8000e46:	440a      	add	r2, r1
 8000e48:	4413      	add	r3, r2
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	75bb      	strb	r3, [r7, #22]
 8000e52:	e044      	b.n	8000ede <lcd_ShowChar+0x176>
		{
			if(!mode)
 8000e54:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d120      	bne.n	8000e9e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8000e5c:	7dfa      	ldrb	r2, [r7, #23]
 8000e5e:	7dbb      	ldrb	r3, [r7, #22]
 8000e60:	fa42 f303 	asr.w	r3, r2, r3
 8000e64:	f003 0301 	and.w	r3, r3, #1
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d004      	beq.n	8000e76 <lcd_ShowChar+0x10e>
 8000e6c:	883b      	ldrh	r3, [r7, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fef4 	bl	8000c5c <LCD_WR_DATA>
 8000e74:	e003      	b.n	8000e7e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8000e76:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff feef 	bl	8000c5c <LCD_WR_DATA>
				m++;
 8000e7e:	7d7b      	ldrb	r3, [r7, #21]
 8000e80:	3301      	adds	r3, #1
 8000e82:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8000e84:	7d7b      	ldrb	r3, [r7, #21]
 8000e86:	7bfa      	ldrb	r2, [r7, #15]
 8000e88:	fbb3 f1f2 	udiv	r1, r3, r2
 8000e8c:	fb02 f201 	mul.w	r2, r2, r1
 8000e90:	1a9b      	subs	r3, r3, r2
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d11f      	bne.n	8000ed8 <lcd_ShowChar+0x170>
				{
					m=0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	757b      	strb	r3, [r7, #21]
					break;
 8000e9c:	e022      	b.n	8000ee4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8000e9e:	7dfa      	ldrb	r2, [r7, #23]
 8000ea0:	7dbb      	ldrb	r3, [r7, #22]
 8000ea2:	fa42 f303 	asr.w	r3, r2, r3
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <lcd_ShowChar+0x152>
 8000eae:	883a      	ldrh	r2, [r7, #0]
 8000eb0:	88b9      	ldrh	r1, [r7, #4]
 8000eb2:	88fb      	ldrh	r3, [r7, #6]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff3f 	bl	8000d38 <lcd_DrawPoint>
				x++;
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8000ec0:	88fa      	ldrh	r2, [r7, #6]
 8000ec2:	8a3b      	ldrh	r3, [r7, #16]
 8000ec4:	1ad2      	subs	r2, r2, r3
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d105      	bne.n	8000ed8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8000ecc:	8a3b      	ldrh	r3, [r7, #16]
 8000ece:	80fb      	strh	r3, [r7, #6]
					y++;
 8000ed0:	88bb      	ldrh	r3, [r7, #4]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	80bb      	strh	r3, [r7, #4]
					break;
 8000ed6:	e005      	b.n	8000ee4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8000ed8:	7dbb      	ldrb	r3, [r7, #22]
 8000eda:	3301      	adds	r3, #1
 8000edc:	75bb      	strb	r3, [r7, #22]
 8000ede:	7dbb      	ldrb	r3, [r7, #22]
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	d9b7      	bls.n	8000e54 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8000ee4:	8a7b      	ldrh	r3, [r7, #18]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	827b      	strh	r3, [r7, #18]
 8000eea:	8a7a      	ldrh	r2, [r7, #18]
 8000eec:	89bb      	ldrh	r3, [r7, #12]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d380      	bcc.n	8000df4 <lcd_ShowChar+0x8c>
 8000ef2:	e000      	b.n	8000ef6 <lcd_ShowChar+0x18e>
		else return;
 8000ef4:	bf00      	nop
				}
			}
		}
	}
}
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd90      	pop	{r4, r7, pc}
 8000efc:	08006a38 	.word	0x08006a38
 8000f00:	08007028 	.word	0x08007028
 8000f04:	080081f8 	.word	0x080081f8

08000f08 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	460a      	mov	r2, r1
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8000f1c:	e004      	b.n	8000f28 <mypow+0x20>
 8000f1e:	79fa      	ldrb	r2, [r7, #7]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	79bb      	ldrb	r3, [r7, #6]
 8000f2a:	1e5a      	subs	r2, r3, #1
 8000f2c:	71ba      	strb	r2, [r7, #6]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d1f5      	bne.n	8000f1e <mypow+0x16>
	return result;
 8000f32:	68fb      	ldr	r3, [r7, #12]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <lcd_ShowFloatNum>:
	}
}


void lcd_ShowFloatNum(uint16_t x,uint16_t y,float num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey)
{
 8000f40:	b590      	push	{r4, r7, lr}
 8000f42:	b08b      	sub	sp, #44	; 0x2c
 8000f44:	af04      	add	r7, sp, #16
 8000f46:	4604      	mov	r4, r0
 8000f48:	4608      	mov	r0, r1
 8000f4a:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	461a      	mov	r2, r3
 8000f52:	4623      	mov	r3, r4
 8000f54:	81fb      	strh	r3, [r7, #14]
 8000f56:	4603      	mov	r3, r0
 8000f58:	81bb      	strh	r3, [r7, #12]
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	71fb      	strb	r3, [r7, #7]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	80bb      	strh	r3, [r7, #4]
	uint8_t t,temp,sizex;
	uint16_t num1;
	sizex=sizey/2;
 8000f62:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000f66:	085b      	lsrs	r3, r3, #1
 8000f68:	75bb      	strb	r3, [r7, #22]
	num1=num*100;
 8000f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000f6e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001048 <lcd_ShowFloatNum+0x108>
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7a:	ee17 3a90 	vmov	r3, s15
 8000f7e:	82bb      	strh	r3, [r7, #20]
	for(t=0;t<len;t++)
 8000f80:	2300      	movs	r3, #0
 8000f82:	75fb      	strb	r3, [r7, #23]
 8000f84:	e057      	b.n	8001036 <lcd_ShowFloatNum+0xf6>
	{
		temp=(num1/mypow(10,len-t-1))%10;
 8000f86:	8abc      	ldrh	r4, [r7, #20]
 8000f88:	79fa      	ldrb	r2, [r7, #7]
 8000f8a:	7dfb      	ldrb	r3, [r7, #23]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	3b01      	subs	r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	4619      	mov	r1, r3
 8000f96:	200a      	movs	r0, #10
 8000f98:	f7ff ffb6 	bl	8000f08 <mypow>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	fbb4 f1f3 	udiv	r1, r4, r3
 8000fa2:	4b2a      	ldr	r3, [pc, #168]	; (800104c <lcd_ShowFloatNum+0x10c>)
 8000fa4:	fba3 2301 	umull	r2, r3, r3, r1
 8000fa8:	08da      	lsrs	r2, r3, #3
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	1aca      	subs	r2, r1, r3
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	74fb      	strb	r3, [r7, #19]
		if(t==(len-2))
 8000fb8:	7dfa      	ldrb	r2, [r7, #23]
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	3b02      	subs	r3, #2
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d11d      	bne.n	8000ffe <lcd_ShowFloatNum+0xbe>
		{
			lcd_ShowChar(x+(len-2)*sizex,y,'.',fc,bc,sizey,0);
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3b02      	subs	r3, #2
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	7dbb      	ldrb	r3, [r7, #22]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	fb12 f303 	smulbb	r3, r2, r3
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	89fb      	ldrh	r3, [r7, #14]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	b298      	uxth	r0, r3
 8000fd8:	88ba      	ldrh	r2, [r7, #4]
 8000fda:	89b9      	ldrh	r1, [r7, #12]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	9302      	str	r3, [sp, #8]
 8000fe0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000fe4:	9301      	str	r3, [sp, #4]
 8000fe6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4613      	mov	r3, r2
 8000fec:	222e      	movs	r2, #46	; 0x2e
 8000fee:	f7ff febb 	bl	8000d68 <lcd_ShowChar>
			t++;
 8000ff2:	7dfb      	ldrb	r3, [r7, #23]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
			len+=1;
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	71fb      	strb	r3, [r7, #7]
		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8000ffe:	7dfb      	ldrb	r3, [r7, #23]
 8001000:	b29a      	uxth	r2, r3
 8001002:	7dbb      	ldrb	r3, [r7, #22]
 8001004:	b29b      	uxth	r3, r3
 8001006:	fb12 f303 	smulbb	r3, r2, r3
 800100a:	b29a      	uxth	r2, r3
 800100c:	89fb      	ldrh	r3, [r7, #14]
 800100e:	4413      	add	r3, r2
 8001010:	b298      	uxth	r0, r3
 8001012:	7cfb      	ldrb	r3, [r7, #19]
 8001014:	3330      	adds	r3, #48	; 0x30
 8001016:	b2da      	uxtb	r2, r3
 8001018:	88bc      	ldrh	r4, [r7, #4]
 800101a:	89b9      	ldrh	r1, [r7, #12]
 800101c:	2300      	movs	r3, #0
 800101e:	9302      	str	r3, [sp, #8]
 8001020:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001024:	9301      	str	r3, [sp, #4]
 8001026:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	4623      	mov	r3, r4
 800102c:	f7ff fe9c 	bl	8000d68 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	3301      	adds	r3, #1
 8001034:	75fb      	strb	r3, [r7, #23]
 8001036:	7dfa      	ldrb	r2, [r7, #23]
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3a3      	bcc.n	8000f86 <lcd_ShowFloatNum+0x46>
	}
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	371c      	adds	r7, #28
 8001044:	46bd      	mov	sp, r7
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	42c80000 	.word	0x42c80000
 800104c:	cccccccd 	.word	0xcccccccd

08001050 <lcd_SetDir>:
	}
}


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	091b      	lsrs	r3, r3, #4
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d007      	beq.n	800107a <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 800106a:	4b0a      	ldr	r3, [pc, #40]	; (8001094 <lcd_SetDir+0x44>)
 800106c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001070:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <lcd_SetDir+0x44>)
 8001074:	22f0      	movs	r2, #240	; 0xf0
 8001076:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001078:	e006      	b.n	8001088 <lcd_SetDir+0x38>
		lcddev.width=240;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <lcd_SetDir+0x44>)
 800107c:	22f0      	movs	r2, #240	; 0xf0
 800107e:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <lcd_SetDir+0x44>)
 8001082:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001086:	805a      	strh	r2, [r3, #2]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	20000194 	.word	0x20000194

08001098 <lcd_init>:


void lcd_init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 800109c:	2200      	movs	r2, #0
 800109e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a2:	48aa      	ldr	r0, [pc, #680]	; (800134c <lcd_init+0x2b4>)
 80010a4:	f002 fb80 	bl	80037a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010ac:	f001 f87e 	bl	80021ac <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 80010b0:	2201      	movs	r2, #1
 80010b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010b6:	48a5      	ldr	r0, [pc, #660]	; (800134c <lcd_init+0x2b4>)
 80010b8:	f002 fb76 	bl	80037a8 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 80010bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010c0:	f001 f874 	bl	80021ac <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 80010c4:	2000      	movs	r0, #0
 80010c6:	f7ff ffc3 	bl	8001050 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 80010ca:	20d3      	movs	r0, #211	; 0xd3
 80010cc:	f7ff fdb6 	bl	8000c3c <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 80010d0:	f7ff fdd4 	bl	8000c7c <LCD_RD_DATA>
 80010d4:	4603      	mov	r3, r0
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b9d      	ldr	r3, [pc, #628]	; (8001350 <lcd_init+0x2b8>)
 80010da:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010dc:	f7ff fdce 	bl	8000c7c <LCD_RD_DATA>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b9a      	ldr	r3, [pc, #616]	; (8001350 <lcd_init+0x2b8>)
 80010e6:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 80010e8:	f7ff fdc8 	bl	8000c7c <LCD_RD_DATA>
 80010ec:	4603      	mov	r3, r0
 80010ee:	461a      	mov	r2, r3
 80010f0:	4b97      	ldr	r3, [pc, #604]	; (8001350 <lcd_init+0x2b8>)
 80010f2:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 80010f4:	4b96      	ldr	r3, [pc, #600]	; (8001350 <lcd_init+0x2b8>)
 80010f6:	889b      	ldrh	r3, [r3, #4]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b94      	ldr	r3, [pc, #592]	; (8001350 <lcd_init+0x2b8>)
 80010fe:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001100:	f7ff fdbc 	bl	8000c7c <LCD_RD_DATA>
 8001104:	4603      	mov	r3, r0
 8001106:	461a      	mov	r2, r3
 8001108:	4b91      	ldr	r3, [pc, #580]	; (8001350 <lcd_init+0x2b8>)
 800110a:	889b      	ldrh	r3, [r3, #4]
 800110c:	4313      	orrs	r3, r2
 800110e:	b29a      	uxth	r2, r3
 8001110:	4b8f      	ldr	r3, [pc, #572]	; (8001350 <lcd_init+0x2b8>)
 8001112:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001114:	20cf      	movs	r0, #207	; 0xcf
 8001116:	f7ff fd91 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff fd9e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001120:	20c1      	movs	r0, #193	; 0xc1
 8001122:	f7ff fd9b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001126:	2030      	movs	r0, #48	; 0x30
 8001128:	f7ff fd98 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 800112c:	20ed      	movs	r0, #237	; 0xed
 800112e:	f7ff fd85 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001132:	2064      	movs	r0, #100	; 0x64
 8001134:	f7ff fd92 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001138:	2003      	movs	r0, #3
 800113a:	f7ff fd8f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 800113e:	2012      	movs	r0, #18
 8001140:	f7ff fd8c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001144:	2081      	movs	r0, #129	; 0x81
 8001146:	f7ff fd89 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 800114a:	20e8      	movs	r0, #232	; 0xe8
 800114c:	f7ff fd76 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001150:	2085      	movs	r0, #133	; 0x85
 8001152:	f7ff fd83 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001156:	2010      	movs	r0, #16
 8001158:	f7ff fd80 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 800115c:	207a      	movs	r0, #122	; 0x7a
 800115e:	f7ff fd7d 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001162:	20cb      	movs	r0, #203	; 0xcb
 8001164:	f7ff fd6a 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001168:	2039      	movs	r0, #57	; 0x39
 800116a:	f7ff fd77 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 800116e:	202c      	movs	r0, #44	; 0x2c
 8001170:	f7ff fd74 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001174:	2000      	movs	r0, #0
 8001176:	f7ff fd71 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 800117a:	2034      	movs	r0, #52	; 0x34
 800117c:	f7ff fd6e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001180:	2002      	movs	r0, #2
 8001182:	f7ff fd6b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001186:	20f7      	movs	r0, #247	; 0xf7
 8001188:	f7ff fd58 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 800118c:	2020      	movs	r0, #32
 800118e:	f7ff fd65 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001192:	20ea      	movs	r0, #234	; 0xea
 8001194:	f7ff fd52 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff fd5f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800119e:	2000      	movs	r0, #0
 80011a0:	f7ff fd5c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 80011a4:	20c0      	movs	r0, #192	; 0xc0
 80011a6:	f7ff fd49 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 80011aa:	201b      	movs	r0, #27
 80011ac:	f7ff fd56 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 80011b0:	20c1      	movs	r0, #193	; 0xc1
 80011b2:	f7ff fd43 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 80011b6:	2001      	movs	r0, #1
 80011b8:	f7ff fd50 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 80011bc:	20c5      	movs	r0, #197	; 0xc5
 80011be:	f7ff fd3d 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 80011c2:	2030      	movs	r0, #48	; 0x30
 80011c4:	f7ff fd4a 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 80011c8:	2030      	movs	r0, #48	; 0x30
 80011ca:	f7ff fd47 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 80011ce:	20c7      	movs	r0, #199	; 0xc7
 80011d0:	f7ff fd34 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 80011d4:	20b7      	movs	r0, #183	; 0xb7
 80011d6:	f7ff fd41 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 80011da:	2036      	movs	r0, #54	; 0x36
 80011dc:	f7ff fd2e 	bl	8000c3c <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 80011e0:	2008      	movs	r0, #8
 80011e2:	f7ff fd3b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 80011e6:	203a      	movs	r0, #58	; 0x3a
 80011e8:	f7ff fd28 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 80011ec:	2055      	movs	r0, #85	; 0x55
 80011ee:	f7ff fd35 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 80011f2:	20b1      	movs	r0, #177	; 0xb1
 80011f4:	f7ff fd22 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff fd2f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 80011fe:	201a      	movs	r0, #26
 8001200:	f7ff fd2c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001204:	20b6      	movs	r0, #182	; 0xb6
 8001206:	f7ff fd19 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 800120a:	200a      	movs	r0, #10
 800120c:	f7ff fd26 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001210:	20a2      	movs	r0, #162	; 0xa2
 8001212:	f7ff fd23 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001216:	20f2      	movs	r0, #242	; 0xf2
 8001218:	f7ff fd10 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff fd1d 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001222:	2026      	movs	r0, #38	; 0x26
 8001224:	f7ff fd0a 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001228:	2001      	movs	r0, #1
 800122a:	f7ff fd17 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 800122e:	20e0      	movs	r0, #224	; 0xe0
 8001230:	f7ff fd04 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001234:	200f      	movs	r0, #15
 8001236:	f7ff fd11 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 800123a:	202a      	movs	r0, #42	; 0x2a
 800123c:	f7ff fd0e 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	f7ff fd0b 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001246:	2008      	movs	r0, #8
 8001248:	f7ff fd08 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 800124c:	200e      	movs	r0, #14
 800124e:	f7ff fd05 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001252:	2008      	movs	r0, #8
 8001254:	f7ff fd02 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001258:	2054      	movs	r0, #84	; 0x54
 800125a:	f7ff fcff 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 800125e:	20a9      	movs	r0, #169	; 0xa9
 8001260:	f7ff fcfc 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001264:	2043      	movs	r0, #67	; 0x43
 8001266:	f7ff fcf9 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 800126a:	200a      	movs	r0, #10
 800126c:	f7ff fcf6 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001270:	200f      	movs	r0, #15
 8001272:	f7ff fcf3 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001276:	2000      	movs	r0, #0
 8001278:	f7ff fcf0 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800127c:	2000      	movs	r0, #0
 800127e:	f7ff fced 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff fcea 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001288:	2000      	movs	r0, #0
 800128a:	f7ff fce7 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 800128e:	20e1      	movs	r0, #225	; 0xe1
 8001290:	f7ff fcd4 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fce1 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 800129a:	2015      	movs	r0, #21
 800129c:	f7ff fcde 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 80012a0:	2017      	movs	r0, #23
 80012a2:	f7ff fcdb 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 80012a6:	2007      	movs	r0, #7
 80012a8:	f7ff fcd8 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 80012ac:	2011      	movs	r0, #17
 80012ae:	f7ff fcd5 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 80012b2:	2006      	movs	r0, #6
 80012b4:	f7ff fcd2 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 80012b8:	202b      	movs	r0, #43	; 0x2b
 80012ba:	f7ff fccf 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 80012be:	2056      	movs	r0, #86	; 0x56
 80012c0:	f7ff fccc 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 80012c4:	203c      	movs	r0, #60	; 0x3c
 80012c6:	f7ff fcc9 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 80012ca:	2005      	movs	r0, #5
 80012cc:	f7ff fcc6 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f7ff fcc3 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012d6:	200f      	movs	r0, #15
 80012d8:	f7ff fcc0 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012dc:	203f      	movs	r0, #63	; 0x3f
 80012de:	f7ff fcbd 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 80012e2:	203f      	movs	r0, #63	; 0x3f
 80012e4:	f7ff fcba 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 80012e8:	200f      	movs	r0, #15
 80012ea:	f7ff fcb7 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 80012ee:	202b      	movs	r0, #43	; 0x2b
 80012f0:	f7ff fca4 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 80012f4:	2000      	movs	r0, #0
 80012f6:	f7ff fcb1 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff fcae 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001300:	2001      	movs	r0, #1
 8001302:	f7ff fcab 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001306:	203f      	movs	r0, #63	; 0x3f
 8001308:	f7ff fca8 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 800130c:	202a      	movs	r0, #42	; 0x2a
 800130e:	f7ff fc95 	bl	8000c3c <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fca2 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fc9f 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 800131e:	2000      	movs	r0, #0
 8001320:	f7ff fc9c 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001324:	20ef      	movs	r0, #239	; 0xef
 8001326:	f7ff fc99 	bl	8000c5c <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 800132a:	2011      	movs	r0, #17
 800132c:	f7ff fc86 	bl	8000c3c <LCD_WR_REG>
	HAL_Delay(120);
 8001330:	2078      	movs	r0, #120	; 0x78
 8001332:	f000 ff3b 	bl	80021ac <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001336:	2029      	movs	r0, #41	; 0x29
 8001338:	f7ff fc80 	bl	8000c3c <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001342:	4804      	ldr	r0, [pc, #16]	; (8001354 <lcd_init+0x2bc>)
 8001344:	f002 fa30 	bl	80037a8 <HAL_GPIO_WritePin>
}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40020800 	.word	0x40020800
 8001350:	20000194 	.word	0x20000194
 8001354:	40020000 	.word	0x40020000

08001358 <lcd_ShowStr>:
		}
	}
}

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b08b      	sub	sp, #44	; 0x2c
 800135c:	af04      	add	r7, sp, #16
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	461a      	mov	r2, r3
 8001362:	4603      	mov	r3, r0
 8001364:	81fb      	strh	r3, [r7, #14]
 8001366:	460b      	mov	r3, r1
 8001368:	81bb      	strh	r3, [r7, #12]
 800136a:	4613      	mov	r3, r2
 800136c:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 800136e:	89fb      	ldrh	r3, [r7, #14]
 8001370:	82bb      	strh	r3, [r7, #20]
    uint8_t bHz=0;
 8001372:	2300      	movs	r3, #0
 8001374:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 8001376:	e048      	b.n	800140a <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d145      	bne.n	800140a <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800137e:	89fa      	ldrh	r2, [r7, #14]
 8001380:	4b26      	ldr	r3, [pc, #152]	; (800141c <lcd_ShowStr+0xc4>)
 8001382:	881b      	ldrh	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	1acb      	subs	r3, r1, r3
 8001390:	429a      	cmp	r2, r3
 8001392:	dc3f      	bgt.n	8001414 <lcd_ShowStr+0xbc>
 8001394:	89ba      	ldrh	r2, [r7, #12]
 8001396:	4b21      	ldr	r3, [pc, #132]	; (800141c <lcd_ShowStr+0xc4>)
 8001398:	885b      	ldrh	r3, [r3, #2]
 800139a:	4619      	mov	r1, r3
 800139c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013a0:	1acb      	subs	r3, r1, r3
 80013a2:	429a      	cmp	r2, r3
 80013a4:	dc36      	bgt.n	8001414 <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b80      	cmp	r3, #128	; 0x80
 80013ac:	d902      	bls.n	80013b4 <lcd_ShowStr+0x5c>
 80013ae:	2301      	movs	r3, #1
 80013b0:	75fb      	strb	r3, [r7, #23]
 80013b2:	e02a      	b.n	800140a <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b0d      	cmp	r3, #13
 80013ba:	d10b      	bne.n	80013d4 <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 80013bc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	89bb      	ldrh	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	81bb      	strh	r3, [r7, #12]
					x=x0;
 80013c8:	8abb      	ldrh	r3, [r7, #20]
 80013ca:	81fb      	strh	r3, [r7, #14]
					str++;
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	3301      	adds	r3, #1
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	e017      	b.n	8001404 <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	88fc      	ldrh	r4, [r7, #6]
 80013da:	89b9      	ldrh	r1, [r7, #12]
 80013dc:	89f8      	ldrh	r0, [r7, #14]
 80013de:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80013e2:	9302      	str	r3, [sp, #8]
 80013e4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013e8:	9301      	str	r3, [sp, #4]
 80013ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4623      	mov	r3, r4
 80013f0:	f7ff fcba 	bl	8000d68 <lcd_ShowChar>
					x+=sizey/2;
 80013f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80013f8:	085b      	lsrs	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	4413      	add	r3, r2
 8001402:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	3301      	adds	r3, #1
 8001408:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d1b2      	bne.n	8001378 <lcd_ShowStr+0x20>
 8001412:	e000      	b.n	8001416 <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 8001414:	bf00      	nop
			}
		}
	}
}
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}
 800141c:	20000194 	.word	0x20000194

08001420 <led7_Scan>:

void led7_init(){
	  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
}

void led7_Scan(){
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
	spi_buffer &= 0x00ff;
 8001424:	4b3f      	ldr	r3, [pc, #252]	; (8001524 <led7_Scan+0x104>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	b2db      	uxtb	r3, r3
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <led7_Scan+0x104>)
 800142e:	801a      	strh	r2, [r3, #0]
	spi_buffer |= led7seg[led7_index] << 8;
 8001430:	4b3d      	ldr	r3, [pc, #244]	; (8001528 <led7_Scan+0x108>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a3d      	ldr	r2, [pc, #244]	; (800152c <led7_Scan+0x10c>)
 8001436:	5cd3      	ldrb	r3, [r2, r3]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b39      	ldr	r3, [pc, #228]	; (8001524 <led7_Scan+0x104>)
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21b      	sxth	r3, r3
 8001446:	b29a      	uxth	r2, r3
 8001448:	4b36      	ldr	r3, [pc, #216]	; (8001524 <led7_Scan+0x104>)
 800144a:	801a      	strh	r2, [r3, #0]
	switch(led7_index){
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <led7_Scan+0x108>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2b03      	cmp	r3, #3
 8001452:	d847      	bhi.n	80014e4 <led7_Scan+0xc4>
 8001454:	a201      	add	r2, pc, #4	; (adr r2, 800145c <led7_Scan+0x3c>)
 8001456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800145a:	bf00      	nop
 800145c:	0800146d 	.word	0x0800146d
 8001460:	0800148b 	.word	0x0800148b
 8001464:	080014a9 	.word	0x080014a9
 8001468:	080014c7 	.word	0x080014c7
	case 0:
		spi_buffer |= 0x00b0;
 800146c:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <led7_Scan+0x104>)
 800146e:	881b      	ldrh	r3, [r3, #0]
 8001470:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8001474:	b29a      	uxth	r2, r3
 8001476:	4b2b      	ldr	r3, [pc, #172]	; (8001524 <led7_Scan+0x104>)
 8001478:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffbf;//1011
 800147a:	4b2a      	ldr	r3, [pc, #168]	; (8001524 <led7_Scan+0x104>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001482:	b29a      	uxth	r2, r3
 8001484:	4b27      	ldr	r3, [pc, #156]	; (8001524 <led7_Scan+0x104>)
 8001486:	801a      	strh	r2, [r3, #0]
		break;
 8001488:	e02d      	b.n	80014e6 <led7_Scan+0xc6>
	case 1:
		spi_buffer |= 0x00d0;
 800148a:	4b26      	ldr	r3, [pc, #152]	; (8001524 <led7_Scan+0x104>)
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	f043 03d0 	orr.w	r3, r3, #208	; 0xd0
 8001492:	b29a      	uxth	r2, r3
 8001494:	4b23      	ldr	r3, [pc, #140]	; (8001524 <led7_Scan+0x104>)
 8001496:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffdf;//1101
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <led7_Scan+0x104>)
 800149a:	881b      	ldrh	r3, [r3, #0]
 800149c:	f023 0320 	bic.w	r3, r3, #32
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b20      	ldr	r3, [pc, #128]	; (8001524 <led7_Scan+0x104>)
 80014a4:	801a      	strh	r2, [r3, #0]
		break;
 80014a6:	e01e      	b.n	80014e6 <led7_Scan+0xc6>
	case 2:
		spi_buffer |= 0x00e0;
 80014a8:	4b1e      	ldr	r3, [pc, #120]	; (8001524 <led7_Scan+0x104>)
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 80014b0:	b29a      	uxth	r2, r3
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <led7_Scan+0x104>)
 80014b4:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xffef;//1110
 80014b6:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <led7_Scan+0x104>)
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	f023 0310 	bic.w	r3, r3, #16
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b18      	ldr	r3, [pc, #96]	; (8001524 <led7_Scan+0x104>)
 80014c2:	801a      	strh	r2, [r3, #0]
		break;
 80014c4:	e00f      	b.n	80014e6 <led7_Scan+0xc6>
	case 3:
		spi_buffer |= 0x0070;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <led7_Scan+0x104>)
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 80014ce:	b29a      	uxth	r2, r3
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <led7_Scan+0x104>)
 80014d2:	801a      	strh	r2, [r3, #0]
		spi_buffer &= 0xff7f;//0111
 80014d4:	4b13      	ldr	r3, [pc, #76]	; (8001524 <led7_Scan+0x104>)
 80014d6:	881b      	ldrh	r3, [r3, #0]
 80014d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80014dc:	b29a      	uxth	r2, r3
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <led7_Scan+0x104>)
 80014e0:	801a      	strh	r2, [r3, #0]
		break;
 80014e2:	e000      	b.n	80014e6 <led7_Scan+0xc6>
	default:
		break;
 80014e4:	bf00      	nop
	}
	led7_index = (led7_index + 1)%4;
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <led7_Scan+0x108>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	425a      	negs	r2, r3
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	bf58      	it	pl
 80014f8:	4253      	negpl	r3, r2
 80014fa:	4a0b      	ldr	r2, [pc, #44]	; (8001528 <led7_Scan+0x108>)
 80014fc:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2140      	movs	r1, #64	; 0x40
 8001502:	480b      	ldr	r0, [pc, #44]	; (8001530 <led7_Scan+0x110>)
 8001504:	f002 f950 	bl	80037a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void*)&spi_buffer, 2, 1);
 8001508:	2301      	movs	r3, #1
 800150a:	2202      	movs	r2, #2
 800150c:	4905      	ldr	r1, [pc, #20]	; (8001524 <led7_Scan+0x104>)
 800150e:	4809      	ldr	r0, [pc, #36]	; (8001534 <led7_Scan+0x114>)
 8001510:	f002 ffa5 	bl	800445e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	2140      	movs	r1, #64	; 0x40
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <led7_Scan+0x110>)
 800151a:	f002 f945 	bl	80037a8 <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000004 	.word	0x20000004
 8001528:	20000034 	.word	0x20000034
 800152c:	20000000 	.word	0x20000000
 8001530:	40021800 	.word	0x40021800
 8001534:	200001dc 	.word	0x200001dc

08001538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b084      	sub	sp, #16
 800153c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800153e:	f000 fdc3 	bl	80020c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001542:	f000 f849 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001546:	f7ff f9c9 	bl	80008dc <MX_GPIO_Init>
  MX_DMA_Init();
 800154a:	f7ff f8d7 	bl	80006fc <MX_DMA_Init>
  MX_ADC1_Init();
 800154e:	f7fe ffb7 	bl	80004c0 <MX_ADC1_Init>
  MX_FSMC_Init();
 8001552:	f7ff f8f3 	bl	800073c <MX_FSMC_Init>
  MX_I2C1_Init();
 8001556:	f7ff fafb 	bl	8000b50 <MX_I2C1_Init>
  MX_SPI1_Init();
 800155a:	f000 f9a9 	bl	80018b0 <MX_SPI1_Init>
  MX_TIM2_Init();
 800155e:	f000 fb01 	bl	8001b64 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001562:	f000 fca7 	bl	8001eb4 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8001566:	f000 faad 	bl	8001ac4 <MX_TIM1_Init>
  MX_TIM13_Init();
 800156a:	f000 fb47 	bl	8001bfc <MX_TIM13_Init>
  MX_USART2_UART_Init();
 800156e:	f000 fccb 	bl	8001f08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  system_init();
 8001572:	f000 f89b 	bl	80016ac <system_init>
  // check connection to esp
  while(uart_EspCheck()){
 8001576:	bf00      	nop
 8001578:	f000 fc8c 	bl	8001e94 <uart_EspCheck>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1fa      	bne.n	8001578 <main+0x40>
	  // do nothing
  }

  while(HAL_GPIO_ReadPin(ESP12_BUSY_GPIO_Port, ESP12_BUSY_Pin)){
 8001582:	e003      	b.n	800158c <main+0x54>
	  // esp is busy -- do nothing
	  HAL_Delay(500);
 8001584:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001588:	f000 fe10 	bl	80021ac <HAL_Delay>
  while(HAL_GPIO_ReadPin(ESP12_BUSY_GPIO_Port, ESP12_BUSY_Pin)){
 800158c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <main+0x94>)
 8001592:	f002 f8f1 	bl	8003778 <HAL_GPIO_ReadPin>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f3      	bne.n	8001584 <main+0x4c>
  }
  lcd_ShowStr(5, 0, "ESP connect success", GREEN, RED, 24, 0);
 800159c:	2300      	movs	r3, #0
 800159e:	9302      	str	r3, [sp, #8]
 80015a0:	2318      	movs	r3, #24
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80015ae:	4a08      	ldr	r2, [pc, #32]	; (80015d0 <main+0x98>)
 80015b0:	2100      	movs	r1, #0
 80015b2:	2005      	movs	r0, #5
 80015b4:	f7ff fed0 	bl	8001358 <lcd_ShowStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(flag_timer2){
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <main+0x9c>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d0fb      	beq.n	80015b8 <main+0x80>
		  flag_timer2 = 0;
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <main+0x9c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	801a      	strh	r2, [r3, #0]
		  // do something
		  read_temperature();
 80015c6:	f000 f881 	bl	80016cc <read_temperature>
	  if(flag_timer2){
 80015ca:	e7f5      	b.n	80015b8 <main+0x80>
 80015cc:	40021400 	.word	0x40021400
 80015d0:	08006a1c 	.word	0x08006a1c
 80015d4:	2000003e 	.word	0x2000003e

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	; 0x50
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f005 fa04 	bl	80069f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SystemClock_Config+0xcc>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <SystemClock_Config+0xcc>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <SystemClock_Config+0xd0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <SystemClock_Config+0xd0>)
 8001622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001634:	2302      	movs	r3, #2
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001638:	2301      	movs	r3, #1
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800163c:	2310      	movs	r3, #16
 800163e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001640:	2302      	movs	r3, #2
 8001642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001644:	2300      	movs	r3, #0
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001648:	2308      	movs	r3, #8
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800164c:	23a8      	movs	r3, #168	; 0xa8
 800164e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001650:	2302      	movs	r3, #2
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001654:	2304      	movs	r3, #4
 8001656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001658:	f107 0320 	add.w	r3, r7, #32
 800165c:	4618      	mov	r0, r3
 800165e:	f002 fa01 	bl	8003a64 <HAL_RCC_OscConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001668:	f000 f88e 	bl	8001788 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166c:	230f      	movs	r3, #15
 800166e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001670:	2302      	movs	r3, #2
 8001672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001674:	2300      	movs	r3, #0
 8001676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001678:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800167c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800167e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001682:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	2105      	movs	r1, #5
 800168a:	4618      	mov	r0, r3
 800168c:	f002 fc62 	bl	8003f54 <HAL_RCC_ClockConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001696:	f000 f877 	bl	8001788 <Error_Handler>
  }
}
 800169a:	bf00      	nop
 800169c:	3750      	adds	r7, #80	; 0x50
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000

080016ac <system_init>:

/* USER CODE BEGIN 4 */
void system_init(){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	timer_init();
 80016b0:	f000 f8aa 	bl	8001808 <timer_init>
	setTimer2(100);
 80016b4:	2064      	movs	r0, #100	; 0x64
 80016b6:	f000 f8b5 	bl	8001824 <setTimer2>
	sensor_init();
 80016ba:	f000 f86b 	bl	8001794 <sensor_init>
	uart_init_esp();
 80016be:	f000 fb77 	bl	8001db0 <uart_init_esp>
	lcd_init();
 80016c2:	f7ff fce9 	bl	8001098 <lcd_init>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <read_temperature>:


uint16_t count = 0;
void read_temperature(){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af02      	add	r7, sp, #8
	count = (count + 1) % 300;
 80016d2:	4b26      	ldr	r3, [pc, #152]	; (800176c <read_temperature+0xa0>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	3301      	adds	r3, #1
 80016d8:	4a25      	ldr	r2, [pc, #148]	; (8001770 <read_temperature+0xa4>)
 80016da:	fb82 1203 	smull	r1, r2, r2, r3
 80016de:	1151      	asrs	r1, r2, #5
 80016e0:	17da      	asrs	r2, r3, #31
 80016e2:	1a8a      	subs	r2, r1, r2
 80016e4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80016e8:	fb01 f202 	mul.w	r2, r1, r2
 80016ec:	1a9a      	subs	r2, r3, r2
 80016ee:	b292      	uxth	r2, r2
 80016f0:	4b1e      	ldr	r3, [pc, #120]	; (800176c <read_temperature+0xa0>)
 80016f2:	801a      	strh	r2, [r3, #0]

	if(!count){
 80016f4:	4b1d      	ldr	r3, [pc, #116]	; (800176c <read_temperature+0xa0>)
 80016f6:	881b      	ldrh	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d134      	bne.n	8001766 <read_temperature+0x9a>
		// after 30s80
		// read sensor
		sensor_Read();
 80016fc:	f000 f858 	bl	80017b0 <sensor_Read>
		// get temp
		temperature = sensor_GetTemperature();
 8001700:	f000 f864 	bl	80017cc <sensor_GetTemperature>
 8001704:	eef0 7a40 	vmov.f32	s15, s0
 8001708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170c:	ee17 3a90 	vmov	r3, s15
 8001710:	b29a      	uxth	r2, r3
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <read_temperature+0xa8>)
 8001714:	801a      	strh	r2, [r3, #0]
		// show temperature to lcd
		lcd_ShowFloatNum(80, 100, temperature, 4, GREEN, RED, 32);
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <read_temperature+0xa8>)
 8001718:	881b      	ldrh	r3, [r3, #0]
 800171a:	ee07 3a90 	vmov	s15, r3
 800171e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001722:	2320      	movs	r3, #32
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001730:	2204      	movs	r2, #4
 8001732:	eeb0 0a67 	vmov.f32	s0, s15
 8001736:	2164      	movs	r1, #100	; 0x64
 8001738:	2050      	movs	r0, #80	; 0x50
 800173a:	f7ff fc01 	bl	8000f40 <lcd_ShowFloatNum>
		// create message
		msg[START_IDX] = '!';
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <read_temperature+0xac>)
 8001740:	2221      	movs	r2, #33	; 0x21
 8001742:	701a      	strb	r2, [r3, #0]
		memcpy(msg + TEMP_IDX, "TEMP", 4);
 8001744:	4b0d      	ldr	r3, [pc, #52]	; (800177c <read_temperature+0xb0>)
 8001746:	2204      	movs	r2, #4
 8001748:	490d      	ldr	r1, [pc, #52]	; (8001780 <read_temperature+0xb4>)
 800174a:	4618      	mov	r0, r3
 800174c:	f005 f944 	bl	80069d8 <memcpy>
		memcpy(msg + DATA_IDX, &temperature, 2);
 8001750:	4a0c      	ldr	r2, [pc, #48]	; (8001784 <read_temperature+0xb8>)
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <read_temperature+0xa8>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	8013      	strh	r3, [r2, #0]
		msg[END_IDX] = '#';
 8001758:	4b07      	ldr	r3, [pc, #28]	; (8001778 <read_temperature+0xac>)
 800175a:	2223      	movs	r2, #35	; 0x23
 800175c:	71da      	strb	r2, [r3, #7]
		// send message to esp through uart
		uart_EspSendBytes(msg, MSG_SIZE);
 800175e:	2108      	movs	r1, #8
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <read_temperature+0xac>)
 8001762:	f000 fb3b 	bl	8001ddc <uart_EspSendBytes>
	}
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	2000003c 	.word	0x2000003c
 8001770:	1b4e81b5 	.word	0x1b4e81b5
 8001774:	2000003a 	.word	0x2000003a
 8001778:	2000030c 	.word	0x2000030c
 800177c:	2000030d 	.word	0x2000030d
 8001780:	08006a30 	.word	0x08006a30
 8001784:	20000311 	.word	0x20000311

08001788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800178c:	b672      	cpsid	i
}
 800178e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001790:	e7fe      	b.n	8001790 <Error_Handler+0x8>
	...

08001794 <sensor_init>:
 */
#include "sensor.h"

uint16_t adc_receive[5];

void sensor_init(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint16_t*)adc_receive, 5);
 8001798:	2205      	movs	r2, #5
 800179a:	4903      	ldr	r1, [pc, #12]	; (80017a8 <sensor_init+0x14>)
 800179c:	4803      	ldr	r0, [pc, #12]	; (80017ac <sensor_init+0x18>)
 800179e:	f000 fd6d 	bl	800227c <HAL_ADC_Start_DMA>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	200001d0 	.word	0x200001d0
 80017ac:	20000048 	.word	0x20000048

080017b0 <sensor_Read>:

void sensor_Read(){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_receive, 5);
 80017b4:	2205      	movs	r2, #5
 80017b6:	4903      	ldr	r1, [pc, #12]	; (80017c4 <sensor_Read+0x14>)
 80017b8:	4803      	ldr	r0, [pc, #12]	; (80017c8 <sensor_Read+0x18>)
 80017ba:	f000 fd5f 	bl	800227c <HAL_ADC_Start_DMA>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	200001d0 	.word	0x200001d0
 80017c8:	20000048 	.word	0x20000048

080017cc <sensor_GetTemperature>:

float sensor_GetCurrent(){
	return (((float)adc_receive[1]*3.3*1000)/(4095*0.647)-2.5)*5/2.5;
}

float sensor_GetTemperature(){
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
	return ((float)adc_receive[4]*330)/(4095);
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <sensor_GetTemperature+0x30>)
 80017d2:	891b      	ldrh	r3, [r3, #8]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001800 <sensor_GetTemperature+0x34>
 80017e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e4:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001804 <sensor_GetTemperature+0x38>
 80017e8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80017ec:	eef0 7a66 	vmov.f32	s15, s13
}
 80017f0:	eeb0 0a67 	vmov.f32	s0, s15
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	200001d0 	.word	0x200001d0
 8001800:	43a50000 	.word	0x43a50000
 8001804:	457ff000 	.word	0x457ff000

08001808 <timer_init>:

uint16_t flag_timer2 = 0;
uint16_t timer2_counter = 0;
uint16_t timer2_MUL = 0;

void timer_init(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 800180c:	4803      	ldr	r0, [pc, #12]	; (800181c <timer_init+0x14>)
 800180e:	f003 f929 	bl	8004a64 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim1);
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <timer_init+0x18>)
 8001814:	f003 f8be 	bl	8004994 <HAL_TIM_Base_Start>
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200002c4 	.word	0x200002c4
 8001820:	2000027c 	.word	0x2000027c

08001824 <setTimer2>:

void timer_EnableDelayUs(){
	HAL_TIM_Base_Start(&htim1);
}

void setTimer2(uint16_t duration){
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	80fb      	strh	r3, [r7, #6]
	timer2_MUL = duration/TIMER_CYCLE_2;
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <setTimer2+0x2c>)
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	8013      	strh	r3, [r2, #0]
	timer2_counter = timer2_MUL;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <setTimer2+0x2c>)
 8001836:	881a      	ldrh	r2, [r3, #0]
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <setTimer2+0x30>)
 800183a:	801a      	strh	r2, [r3, #0]
	flag_timer2 = 0;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <setTimer2+0x34>)
 800183e:	2200      	movs	r2, #0
 8001840:	801a      	strh	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000042 	.word	0x20000042
 8001854:	20000040 	.word	0x20000040
 8001858:	2000003e 	.word	0x2000003e

0800185c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2){
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d116      	bne.n	800189c <HAL_TIM_PeriodElapsedCallback+0x40>
		if(timer2_counter > 0){
 800186e:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d010      	beq.n	8001898 <HAL_TIM_PeriodElapsedCallback+0x3c>
			timer2_counter--;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	3b01      	subs	r3, #1
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001880:	801a      	strh	r2, [r3, #0]
			if(timer2_counter == 0) {
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d106      	bne.n	8001898 <HAL_TIM_PeriodElapsedCallback+0x3c>
				flag_timer2 = 1;
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800188c:	2201      	movs	r2, #1
 800188e:	801a      	strh	r2, [r3, #0]
				timer2_counter = timer2_MUL;
 8001890:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	4b03      	ldr	r3, [pc, #12]	; (80018a4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001896:	801a      	strh	r2, [r3, #0]
			}
		}
		led7_Scan();
 8001898:	f7ff fdc2 	bl	8001420 <led7_Scan>
	}
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	20000040 	.word	0x20000040
 80018a8:	2000003e 	.word	0x2000003e
 80018ac:	20000042 	.word	0x20000042

080018b0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <MX_SPI1_Init+0x64>)
 80018b6:	4a18      	ldr	r2, [pc, #96]	; (8001918 <MX_SPI1_Init+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ba:	4b16      	ldr	r3, [pc, #88]	; (8001914 <MX_SPI1_Init+0x64>)
 80018bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <MX_SPI1_Init+0x64>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <MX_SPI1_Init+0x64>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018ce:	4b11      	ldr	r3, [pc, #68]	; (8001914 <MX_SPI1_Init+0x64>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <MX_SPI1_Init+0x64>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80018da:	4b0e      	ldr	r3, [pc, #56]	; (8001914 <MX_SPI1_Init+0x64>)
 80018dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <MX_SPI1_Init+0x64>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <MX_SPI1_Init+0x64>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ee:	4b09      	ldr	r3, [pc, #36]	; (8001914 <MX_SPI1_Init+0x64>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <MX_SPI1_Init+0x64>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80018fa:	4b06      	ldr	r3, [pc, #24]	; (8001914 <MX_SPI1_Init+0x64>)
 80018fc:	220a      	movs	r2, #10
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001900:	4804      	ldr	r0, [pc, #16]	; (8001914 <MX_SPI1_Init+0x64>)
 8001902:	f002 fd23 	bl	800434c <HAL_SPI_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800190c:	f7ff ff3c 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001910:	bf00      	nop
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200001dc 	.word	0x200001dc
 8001918:	40013000 	.word	0x40013000

0800191c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a19      	ldr	r2, [pc, #100]	; (80019a0 <HAL_SPI_MspInit+0x84>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d12b      	bne.n	8001996 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001948:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800194c:	6453      	str	r3, [r2, #68]	; 0x44
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001952:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a10      	ldr	r2, [pc, #64]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 8001964:	f043 0302 	orr.w	r3, r3, #2
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_SPI_MspInit+0x88>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001976:	2338      	movs	r3, #56	; 0x38
 8001978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4805      	ldr	r0, [pc, #20]	; (80019a8 <HAL_SPI_MspInit+0x8c>)
 8001992:	f001 fd55 	bl	8003440 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3728      	adds	r7, #40	; 0x28
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40013000 	.word	0x40013000
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020400 	.word	0x40020400

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	370c      	adds	r7, #12
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	40023800 	.word	0x40023800

080019fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a00:	e7fe      	b.n	8001a00 <NMI_Handler+0x4>

08001a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a06:	e7fe      	b.n	8001a06 <HardFault_Handler+0x4>

08001a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <MemManage_Handler+0x4>

08001a0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <BusFault_Handler+0x4>

08001a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a18:	e7fe      	b.n	8001a18 <UsageFault_Handler+0x4>

08001a1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a1e:	bf00      	nop
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a36:	b480      	push	{r7}
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a48:	f000 fb90 	bl	800216c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM2_IRQHandler+0x10>)
 8001a56:	f003 f8ce 	bl	8004bf6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	200002c4 	.word	0x200002c4

08001a64 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a68:	4802      	ldr	r0, [pc, #8]	; (8001a74 <USART1_IRQHandler+0x10>)
 8001a6a:	f004 f809 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000370 	.word	0x20000370

08001a78 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	; (8001a88 <USART2_IRQHandler+0x10>)
 8001a7e:	f003 ffff 	bl	8005a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200003b4 	.word	0x200003b4

08001a8c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <DMA2_Stream0_IRQHandler+0x10>)
 8001a92:	f001 fa6b 	bl	8002f6c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000090 	.word	0x20000090

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001ae2:	4a1f      	ldr	r2, [pc, #124]	; (8001b60 <MX_TIM1_Init+0x9c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84 - 1;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001ae8:	2253      	movs	r2, #83	; 0x53
 8001aea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afa:	4b18      	ldr	r3, [pc, #96]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b0c:	4813      	ldr	r0, [pc, #76]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001b0e:	f002 fef1 	bl	80048f4 <HAL_TIM_Base_Init>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b18:	f7ff fe36 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	4619      	mov	r1, r3
 8001b28:	480c      	ldr	r0, [pc, #48]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001b2a:	f003 fa2f 	bl	8004f8c <HAL_TIM_ConfigClockSource>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d001      	beq.n	8001b38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b34:	f7ff fe28 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b40:	463b      	mov	r3, r7
 8001b42:	4619      	mov	r1, r3
 8001b44:	4805      	ldr	r0, [pc, #20]	; (8001b5c <MX_TIM1_Init+0x98>)
 8001b46:	f003 fdfb 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b50:	f7ff fe1a 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b54:	bf00      	nop
 8001b56:	3718      	adds	r7, #24
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	2000027c 	.word	0x2000027c
 8001b60:	40010000 	.word	0x40010000

08001b64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b086      	sub	sp, #24
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6a:	f107 0308 	add.w	r3, r7, #8
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	463b      	mov	r3, r7
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001b82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840 - 1;
 8001b88:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001b8a:	f240 3247 	movw	r2, #839	; 0x347
 8001b8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100 - 1;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001b98:	2263      	movs	r2, #99	; 0x63
 8001b9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001baa:	f002 fea3 	bl	80048f4 <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001bb4:	f7ff fde8 	bl	8001788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001bc6:	f003 f9e1 	bl	8004f8c <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bd0:	f7ff fdda 	bl	8001788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM2_Init+0x94>)
 8001be2:	f003 fdad 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bec:	f7ff fdcc 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	200002c4 	.word	0x200002c4

08001bfc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2200      	movs	r2, #0
 8001c06:	601a      	str	r2, [r3, #0]
 8001c08:	605a      	str	r2, [r3, #4]
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	611a      	str	r2, [r3, #16]
 8001c10:	615a      	str	r2, [r3, #20]
 8001c12:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001c14:	4b1e      	ldr	r3, [pc, #120]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c16:	4a1f      	ldr	r2, [pc, #124]	; (8001c94 <MX_TIM13_Init+0x98>)
 8001c18:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 840 - 1;
 8001c1a:	4b1d      	ldr	r3, [pc, #116]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c1c:	f240 3247 	movw	r2, #839	; 0x347
 8001c20:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c22:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100 - 1;
 8001c28:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c2a:	2263      	movs	r2, #99	; 0x63
 8001c2c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	4b18      	ldr	r3, [pc, #96]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c34:	4b16      	ldr	r3, [pc, #88]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001c3a:	4815      	ldr	r0, [pc, #84]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c3c:	f002 fe5a 	bl	80048f4 <HAL_TIM_Base_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001c46:	f7ff fd9f 	bl	8001788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8001c4a:	4811      	ldr	r0, [pc, #68]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c4c:	f002 ff7a 	bl	8004b44 <HAL_TIM_PWM_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001c56:	f7ff fd97 	bl	8001788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c5a:	2360      	movs	r3, #96	; 0x60
 8001c5c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4807      	ldr	r0, [pc, #28]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c72:	f003 f8c9 	bl	8004e08 <HAL_TIM_PWM_ConfigChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 8001c7c:	f7ff fd84 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001c80:	4803      	ldr	r0, [pc, #12]	; (8001c90 <MX_TIM13_Init+0x94>)
 8001c82:	f000 f85b 	bl	8001d3c <HAL_TIM_MspPostInit>

}
 8001c86:	bf00      	nop
 8001c88:	3720      	adds	r7, #32
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000234 	.word	0x20000234
 8001c94:	40001c00 	.word	0x40001c00

08001c98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <HAL_TIM_Base_MspInit+0x98>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10e      	bne.n	8001cc8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	4b21      	ldr	r3, [pc, #132]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a20      	ldr	r2, [pc, #128]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 8001cc6:	e02e      	b.n	8001d26 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM2)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cd0:	d116      	bne.n	8001d00 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	4a16      	ldr	r2, [pc, #88]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	201c      	movs	r0, #28
 8001cf4:	f000 ff6b 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001cf8:	201c      	movs	r0, #28
 8001cfa:	f000 ff84 	bl	8002c06 <HAL_NVIC_EnableIRQ>
}
 8001cfe:	e012      	b.n	8001d26 <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM13)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0c      	ldr	r2, [pc, #48]	; (8001d38 <HAL_TIM_Base_MspInit+0xa0>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d10d      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b09      	ldr	r3, [pc, #36]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a08      	ldr	r2, [pc, #32]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_TIM_Base_MspInit+0x9c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
}
 8001d26:	bf00      	nop
 8001d28:	3718      	adds	r7, #24
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40010000 	.word	0x40010000
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40001c00 	.word	0x40001c00

08001d3c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b088      	sub	sp, #32
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d44:	f107 030c 	add.w	r3, r7, #12
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	605a      	str	r2, [r3, #4]
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	60da      	str	r2, [r3, #12]
 8001d52:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM13)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <HAL_TIM_MspPostInit+0x68>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d11e      	bne.n	8001d9c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM13_MspPostInit 0 */

  /* USER CODE END TIM13_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_TIM_MspPostInit+0x6c>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_TIM_MspPostInit+0x6c>)
 8001d68:	f043 0320 	orr.w	r3, r3, #32
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_TIM_MspPostInit+0x6c>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0320 	and.w	r3, r3, #32
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
    /**TIM13 GPIO Configuration
    PF8     ------> TIM13_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001d7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d7e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d8c:	2309      	movs	r3, #9
 8001d8e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	4619      	mov	r1, r3
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_TIM_MspPostInit+0x70>)
 8001d98:	f001 fb52 	bl	8003440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3720      	adds	r7, #32
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40001c00 	.word	0x40001c00
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40021400 	.word	0x40021400

08001db0 <uart_init_esp>:
    uart_Rs232SendString(".");
    sprintf((void*)msg,"%ld",num%100);
    uart_Rs232SendString(msg);
}

void uart_init_esp(){
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001db4:	2201      	movs	r2, #1
 8001db6:	4906      	ldr	r1, [pc, #24]	; (8001dd0 <uart_init_esp+0x20>)
 8001db8:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <uart_init_esp+0x24>)
 8001dba:	f003 fe30 	bl	8005a1e <HAL_UART_Receive_IT>
	HAL_GPIO_WritePin(ESP12_PWR_GPIO_Port, ESP12_PWR_Pin, 1);
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc4:	4804      	ldr	r0, [pc, #16]	; (8001dd8 <uart_init_esp+0x28>)
 8001dc6:	f001 fcef 	bl	80037a8 <HAL_GPIO_WritePin>
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000045 	.word	0x20000045
 8001dd4:	200003b4 	.word	0x200003b4
 8001dd8:	40021400 	.word	0x40021400

08001ddc <uart_EspSendBytes>:

void uart_EspSendBytes(uint8_t* bytes, uint16_t size){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b082      	sub	sp, #8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, bytes, size, 10);
 8001de8:	887a      	ldrh	r2, [r7, #2]
 8001dea:	230a      	movs	r3, #10
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	4803      	ldr	r0, [pc, #12]	; (8001dfc <uart_EspSendBytes+0x20>)
 8001df0:	f003 fd83 	bl	80058fa <HAL_UART_Transmit>
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200003b4 	.word	0x200003b4

08001e00 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1){
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_UART_RxCpltCallback+0x74>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d10a      	bne.n	8001e28 <HAL_UART_RxCpltCallback+0x28>
		// rs232 isr
		// can be modified
		HAL_UART_Transmit(&huart1, &receive_buffer1, 1, 10);
 8001e12:	230a      	movs	r3, #10
 8001e14:	2201      	movs	r2, #1
 8001e16:	4918      	ldr	r1, [pc, #96]	; (8001e78 <HAL_UART_RxCpltCallback+0x78>)
 8001e18:	4818      	ldr	r0, [pc, #96]	; (8001e7c <HAL_UART_RxCpltCallback+0x7c>)
 8001e1a:	f003 fd6e 	bl	80058fa <HAL_UART_Transmit>

		// turn on the receive interrupt
		HAL_UART_Receive_IT(&huart1, &receive_buffer1, 1);
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4915      	ldr	r1, [pc, #84]	; (8001e78 <HAL_UART_RxCpltCallback+0x78>)
 8001e22:	4816      	ldr	r0, [pc, #88]	; (8001e7c <HAL_UART_RxCpltCallback+0x7c>)
 8001e24:	f003 fdfb 	bl	8005a1e <HAL_UART_Receive_IT>
	}

	if(huart->Instance == USART2){
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a14      	ldr	r2, [pc, #80]	; (8001e80 <HAL_UART_RxCpltCallback+0x80>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d11b      	bne.n	8001e6a <HAL_UART_RxCpltCallback+0x6a>
		if(receive_buffer2 == 'O') check_esp = 1;
 8001e32:	4b14      	ldr	r3, [pc, #80]	; (8001e84 <HAL_UART_RxCpltCallback+0x84>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2b4f      	cmp	r3, #79	; 0x4f
 8001e38:	d103      	bne.n	8001e42 <HAL_UART_RxCpltCallback+0x42>
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <HAL_UART_RxCpltCallback+0x88>)
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	701a      	strb	r2, [r3, #0]
 8001e40:	e00e      	b.n	8001e60 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'a') light_status = 0;
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <HAL_UART_RxCpltCallback+0x84>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b61      	cmp	r3, #97	; 0x61
 8001e48:	d103      	bne.n	8001e52 <HAL_UART_RxCpltCallback+0x52>
 8001e4a:	4b10      	ldr	r3, [pc, #64]	; (8001e8c <HAL_UART_RxCpltCallback+0x8c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
 8001e50:	e006      	b.n	8001e60 <HAL_UART_RxCpltCallback+0x60>
		else if(receive_buffer2 == 'A') light_status = 1;
 8001e52:	4b0c      	ldr	r3, [pc, #48]	; (8001e84 <HAL_UART_RxCpltCallback+0x84>)
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2b41      	cmp	r3, #65	; 0x41
 8001e58:	d102      	bne.n	8001e60 <HAL_UART_RxCpltCallback+0x60>
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_UART_RxCpltCallback+0x8c>)
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, &receive_buffer2, 1);
 8001e60:	2201      	movs	r2, #1
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <HAL_UART_RxCpltCallback+0x84>)
 8001e64:	480a      	ldr	r0, [pc, #40]	; (8001e90 <HAL_UART_RxCpltCallback+0x90>)
 8001e66:	f003 fdda 	bl	8005a1e <HAL_UART_Receive_IT>
	}
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40011000 	.word	0x40011000
 8001e78:	20000044 	.word	0x20000044
 8001e7c:	20000370 	.word	0x20000370
 8001e80:	40004400 	.word	0x40004400
 8001e84:	20000045 	.word	0x20000045
 8001e88:	20000046 	.word	0x20000046
 8001e8c:	20000038 	.word	0x20000038
 8001e90:	200003b4 	.word	0x200003b4

08001e94 <uart_EspCheck>:

uint8_t uart_EspCheck(){
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
	if(check_esp == 1) return 1;
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <uart_EspCheck+0x1c>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <uart_EspCheck+0x10>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <uart_EspCheck+0x12>
	return 0;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	20000046 	.word	0x20000046

08001eb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001eb8:	4b11      	ldr	r3, [pc, #68]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <MX_USART1_UART_Init+0x50>)
 8001ebc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ebe:	4b10      	ldr	r3, [pc, #64]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ec4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ec6:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ed2:	4b0b      	ldr	r3, [pc, #44]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eda:	220c      	movs	r2, #12
 8001edc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <MX_USART1_UART_Init+0x4c>)
 8001eec:	f003 fcb8 	bl	8005860 <HAL_UART_Init>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ef6:	f7ff fc47 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000370 	.word	0x20000370
 8001f04:	40011000 	.word	0x40011000

08001f08 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f0c:	4b11      	ldr	r3, [pc, #68]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f0e:	4a12      	ldr	r2, [pc, #72]	; (8001f58 <MX_USART2_UART_Init+0x50>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f26:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f2e:	220c      	movs	r2, #12
 8001f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3e:	4805      	ldr	r0, [pc, #20]	; (8001f54 <MX_USART2_UART_Init+0x4c>)
 8001f40:	f003 fc8e 	bl	8005860 <HAL_UART_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f4a:	f7ff fc1d 	bl	8001788 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f4e:	bf00      	nop
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003b4 	.word	0x200003b4
 8001f58:	40004400 	.word	0x40004400

08001f5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b08c      	sub	sp, #48	; 0x30
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f64:	f107 031c 	add.w	r3, r7, #28
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	60da      	str	r2, [r3, #12]
 8001f72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a3a      	ldr	r2, [pc, #232]	; (8002064 <HAL_UART_MspInit+0x108>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d135      	bne.n	8001fea <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001f88:	f043 0310 	orr.w	r3, r3, #16
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b36      	ldr	r3, [pc, #216]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	61bb      	str	r3, [r7, #24]
 8001f98:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	4b32      	ldr	r3, [pc, #200]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a31      	ldr	r2, [pc, #196]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001fb6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	4826      	ldr	r0, [pc, #152]	; (800206c <HAL_UART_MspInit+0x110>)
 8001fd4:	f001 fa34 	bl	8003440 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2100      	movs	r1, #0
 8001fdc:	2025      	movs	r0, #37	; 0x25
 8001fde:	f000 fdf6 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fe2:	2025      	movs	r0, #37	; 0x25
 8001fe4:	f000 fe0f 	bl	8002c06 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fe8:	e038      	b.n	800205c <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART2)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a20      	ldr	r2, [pc, #128]	; (8002070 <HAL_UART_MspInit+0x114>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d133      	bne.n	800205c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	613b      	str	r3, [r7, #16]
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8001ffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002002:	6413      	str	r3, [r2, #64]	; 0x40
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	4b14      	ldr	r3, [pc, #80]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	4a13      	ldr	r2, [pc, #76]	; (8002068 <HAL_UART_MspInit+0x10c>)
 800201a:	f043 0301 	orr.w	r3, r3, #1
 800201e:	6313      	str	r3, [r2, #48]	; 0x30
 8002020:	4b11      	ldr	r3, [pc, #68]	; (8002068 <HAL_UART_MspInit+0x10c>)
 8002022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800202c:	230c      	movs	r3, #12
 800202e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002038:	2303      	movs	r3, #3
 800203a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800203c:	2307      	movs	r3, #7
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	4619      	mov	r1, r3
 8002046:	4809      	ldr	r0, [pc, #36]	; (800206c <HAL_UART_MspInit+0x110>)
 8002048:	f001 f9fa 	bl	8003440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2026      	movs	r0, #38	; 0x26
 8002052:	f000 fdbc 	bl	8002bce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002056:	2026      	movs	r0, #38	; 0x26
 8002058:	f000 fdd5 	bl	8002c06 <HAL_NVIC_EnableIRQ>
}
 800205c:	bf00      	nop
 800205e:	3730      	adds	r7, #48	; 0x30
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40011000 	.word	0x40011000
 8002068:	40023800 	.word	0x40023800
 800206c:	40020000 	.word	0x40020000
 8002070:	40004400 	.word	0x40004400

08002074 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002074:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002078:	480d      	ldr	r0, [pc, #52]	; (80020b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800207a:	490e      	ldr	r1, [pc, #56]	; (80020b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800207c:	4a0e      	ldr	r2, [pc, #56]	; (80020b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800207e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002080:	e002      	b.n	8002088 <LoopCopyDataInit>

08002082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002086:	3304      	adds	r3, #4

08002088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800208a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800208c:	d3f9      	bcc.n	8002082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002090:	4c0b      	ldr	r4, [pc, #44]	; (80020c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002094:	e001      	b.n	800209a <LoopFillZerobss>

08002096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002098:	3204      	adds	r2, #4

0800209a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800209a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800209c:	d3fb      	bcc.n	8002096 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800209e:	f7ff fcff 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020a2:	f004 fc75 	bl	8006990 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020a6:	f7ff fa47 	bl	8001538 <main>
  bx  lr    
 80020aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020b4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80020b8:	080099e8 	.word	0x080099e8
  ldr r2, =_sbss
 80020bc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80020c0:	200003fc 	.word	0x200003fc

080020c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020c4:	e7fe      	b.n	80020c4 <ADC_IRQHandler>
	...

080020c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a0d      	ldr	r2, [pc, #52]	; (8002108 <HAL_Init+0x40>)
 80020d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020d8:	4b0b      	ldr	r3, [pc, #44]	; (8002108 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0a      	ldr	r2, [pc, #40]	; (8002108 <HAL_Init+0x40>)
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020e4:	4b08      	ldr	r3, [pc, #32]	; (8002108 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a07      	ldr	r2, [pc, #28]	; (8002108 <HAL_Init+0x40>)
 80020ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020f0:	2003      	movs	r0, #3
 80020f2:	f000 fd61 	bl	8002bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020f6:	200f      	movs	r0, #15
 80020f8:	f000 f808 	bl	800210c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020fc:	f7ff fc56 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40023c00 	.word	0x40023c00

0800210c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002114:	4b12      	ldr	r3, [pc, #72]	; (8002160 <HAL_InitTick+0x54>)
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b12      	ldr	r3, [pc, #72]	; (8002164 <HAL_InitTick+0x58>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4619      	mov	r1, r3
 800211e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002122:	fbb3 f3f1 	udiv	r3, r3, r1
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fd79 	bl	8002c22 <HAL_SYSTICK_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	e00e      	b.n	8002158 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b0f      	cmp	r3, #15
 800213e:	d80a      	bhi.n	8002156 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002140:	2200      	movs	r2, #0
 8002142:	6879      	ldr	r1, [r7, #4]
 8002144:	f04f 30ff 	mov.w	r0, #4294967295
 8002148:	f000 fd41 	bl	8002bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800214c:	4a06      	ldr	r2, [pc, #24]	; (8002168 <HAL_InitTick+0x5c>)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
 8002154:	e000      	b.n	8002158 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
}
 8002158:	4618      	mov	r0, r3
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	20000008 	.word	0x20000008
 8002164:	20000010 	.word	0x20000010
 8002168:	2000000c 	.word	0x2000000c

0800216c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x20>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	461a      	mov	r2, r3
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_IncTick+0x24>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4a04      	ldr	r2, [pc, #16]	; (8002190 <HAL_IncTick+0x24>)
 800217e:	6013      	str	r3, [r2, #0]
}
 8002180:	bf00      	nop
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000010 	.word	0x20000010
 8002190:	200003f8 	.word	0x200003f8

08002194 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return uwTick;
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <HAL_GetTick+0x14>)
 800219a:	681b      	ldr	r3, [r3, #0]
}
 800219c:	4618      	mov	r0, r3
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	200003f8 	.word	0x200003f8

080021ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b4:	f7ff ffee 	bl	8002194 <HAL_GetTick>
 80021b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c4:	d005      	beq.n	80021d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021c6:	4b0a      	ldr	r3, [pc, #40]	; (80021f0 <HAL_Delay+0x44>)
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021d2:	bf00      	nop
 80021d4:	f7ff ffde 	bl	8002194 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d8f7      	bhi.n	80021d4 <HAL_Delay+0x28>
  {
  }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000010 	.word	0x20000010

080021f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d101      	bne.n	800220a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e033      	b.n	8002272 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002212:	6878      	ldr	r0, [r7, #4]
 8002214:	f7fe f9de 	bl	80005d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0310 	and.w	r3, r3, #16
 800222e:	2b00      	cmp	r3, #0
 8002230:	d118      	bne.n	8002264 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800223a:	f023 0302 	bic.w	r3, r3, #2
 800223e:	f043 0202 	orr.w	r2, r3, #2
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fa68 	bl	800271c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002256:	f023 0303 	bic.w	r3, r3, #3
 800225a:	f043 0201 	orr.w	r2, r3, #1
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	641a      	str	r2, [r3, #64]	; 0x40
 8002262:	e001      	b.n	8002268 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002288:	2300      	movs	r3, #0
 800228a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002292:	2b01      	cmp	r3, #1
 8002294:	d101      	bne.n	800229a <HAL_ADC_Start_DMA+0x1e>
 8002296:	2302      	movs	r3, #2
 8002298:	e0e9      	b.n	800246e <HAL_ADC_Start_DMA+0x1f2>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2201      	movs	r2, #1
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0301 	and.w	r3, r3, #1
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d018      	beq.n	80022e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0201 	orr.w	r2, r2, #1
 80022be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022c0:	4b6d      	ldr	r3, [pc, #436]	; (8002478 <HAL_ADC_Start_DMA+0x1fc>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a6d      	ldr	r2, [pc, #436]	; (800247c <HAL_ADC_Start_DMA+0x200>)
 80022c6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ca:	0c9a      	lsrs	r2, r3, #18
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022d4:	e002      	b.n	80022dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	3b01      	subs	r3, #1
 80022da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1f9      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022f0:	d107      	bne.n	8002302 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002300:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 0301 	and.w	r3, r3, #1
 800230c:	2b01      	cmp	r3, #1
 800230e:	f040 80a1 	bne.w	8002454 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002316:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800231a:	f023 0301 	bic.w	r3, r3, #1
 800231e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002338:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800233c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800234c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002350:	d106      	bne.n	8002360 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f023 0206 	bic.w	r2, r3, #6
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	645a      	str	r2, [r3, #68]	; 0x44
 800235e:	e002      	b.n	8002366 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2200      	movs	r2, #0
 8002364:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800236e:	4b44      	ldr	r3, [pc, #272]	; (8002480 <HAL_ADC_Start_DMA+0x204>)
 8002370:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002376:	4a43      	ldr	r2, [pc, #268]	; (8002484 <HAL_ADC_Start_DMA+0x208>)
 8002378:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237e:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_ADC_Start_DMA+0x20c>)
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002386:	4a41      	ldr	r2, [pc, #260]	; (800248c <HAL_ADC_Start_DMA+0x210>)
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002392:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80023a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	334c      	adds	r3, #76	; 0x4c
 80023be:	4619      	mov	r1, r3
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f000 fce8 	bl	8002d98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f003 031f 	and.w	r3, r3, #31
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d12a      	bne.n	800242a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a2d      	ldr	r2, [pc, #180]	; (8002490 <HAL_ADC_Start_DMA+0x214>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d015      	beq.n	800240a <HAL_ADC_Start_DMA+0x18e>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a2c      	ldr	r2, [pc, #176]	; (8002494 <HAL_ADC_Start_DMA+0x218>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d105      	bne.n	80023f4 <HAL_ADC_Start_DMA+0x178>
 80023e8:	4b25      	ldr	r3, [pc, #148]	; (8002480 <HAL_ADC_Start_DMA+0x204>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 031f 	and.w	r3, r3, #31
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a27      	ldr	r2, [pc, #156]	; (8002498 <HAL_ADC_Start_DMA+0x21c>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d136      	bne.n	800246c <HAL_ADC_Start_DMA+0x1f0>
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_ADC_Start_DMA+0x204>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0310 	and.w	r3, r3, #16
 8002406:	2b00      	cmp	r3, #0
 8002408:	d130      	bne.n	800246c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d129      	bne.n	800246c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e020      	b.n	800246c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a18      	ldr	r2, [pc, #96]	; (8002490 <HAL_ADC_Start_DMA+0x214>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d11b      	bne.n	800246c <HAL_ADC_Start_DMA+0x1f0>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d114      	bne.n	800246c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002450:	609a      	str	r2, [r3, #8]
 8002452:	e00b      	b.n	800246c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f043 0210 	orr.w	r2, r3, #16
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002464:	f043 0201 	orr.w	r2, r3, #1
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3718      	adds	r7, #24
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	20000008 	.word	0x20000008
 800247c:	431bde83 	.word	0x431bde83
 8002480:	40012300 	.word	0x40012300
 8002484:	08002915 	.word	0x08002915
 8002488:	080029cf 	.word	0x080029cf
 800248c:	080029eb 	.word	0x080029eb
 8002490:	40012000 	.word	0x40012000
 8002494:	40012100 	.word	0x40012100
 8002498:	40012200 	.word	0x40012200

0800249c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80024e2:	2300      	movs	r3, #0
 80024e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	d101      	bne.n	80024f4 <HAL_ADC_ConfigChannel+0x1c>
 80024f0:	2302      	movs	r3, #2
 80024f2:	e105      	b.n	8002700 <HAL_ADC_ConfigChannel+0x228>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2201      	movs	r2, #1
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b09      	cmp	r3, #9
 8002502:	d925      	bls.n	8002550 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68d9      	ldr	r1, [r3, #12]
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	b29b      	uxth	r3, r3
 8002510:	461a      	mov	r2, r3
 8002512:	4613      	mov	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	4413      	add	r3, r2
 8002518:	3b1e      	subs	r3, #30
 800251a:	2207      	movs	r2, #7
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43da      	mvns	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	400a      	ands	r2, r1
 8002528:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68d9      	ldr	r1, [r3, #12]
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	b29b      	uxth	r3, r3
 800253a:	4618      	mov	r0, r3
 800253c:	4603      	mov	r3, r0
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	4403      	add	r3, r0
 8002542:	3b1e      	subs	r3, #30
 8002544:	409a      	lsls	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	60da      	str	r2, [r3, #12]
 800254e:	e022      	b.n	8002596 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6919      	ldr	r1, [r3, #16]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	4613      	mov	r3, r2
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	4413      	add	r3, r2
 8002564:	2207      	movs	r2, #7
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	43da      	mvns	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	400a      	ands	r2, r1
 8002572:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6919      	ldr	r1, [r3, #16]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	b29b      	uxth	r3, r3
 8002584:	4618      	mov	r0, r3
 8002586:	4603      	mov	r3, r0
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4403      	add	r3, r0
 800258c:	409a      	lsls	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b06      	cmp	r3, #6
 800259c:	d824      	bhi.n	80025e8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685a      	ldr	r2, [r3, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	3b05      	subs	r3, #5
 80025b0:	221f      	movs	r2, #31
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	400a      	ands	r2, r1
 80025be:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	4413      	add	r3, r2
 80025d8:	3b05      	subs	r3, #5
 80025da:	fa00 f203 	lsl.w	r2, r0, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	635a      	str	r2, [r3, #52]	; 0x34
 80025e6:	e04c      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b0c      	cmp	r3, #12
 80025ee:	d824      	bhi.n	800263a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	4413      	add	r3, r2
 8002600:	3b23      	subs	r3, #35	; 0x23
 8002602:	221f      	movs	r2, #31
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	43da      	mvns	r2, r3
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	400a      	ands	r2, r1
 8002610:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	4618      	mov	r0, r3
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	3b23      	subs	r3, #35	; 0x23
 800262c:	fa00 f203 	lsl.w	r2, r0, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
 8002638:	e023      	b.n	8002682 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	3b41      	subs	r3, #65	; 0x41
 800264c:	221f      	movs	r2, #31
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	400a      	ands	r2, r1
 800265a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	b29b      	uxth	r3, r3
 8002668:	4618      	mov	r0, r3
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685a      	ldr	r2, [r3, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	4413      	add	r3, r2
 8002674:	3b41      	subs	r3, #65	; 0x41
 8002676:	fa00 f203 	lsl.w	r2, r0, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002682:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_ADC_ConfigChannel+0x234>)
 8002684:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a21      	ldr	r2, [pc, #132]	; (8002710 <HAL_ADC_ConfigChannel+0x238>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d109      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1cc>
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2b12      	cmp	r3, #18
 8002696:	d105      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a19      	ldr	r2, [pc, #100]	; (8002710 <HAL_ADC_ConfigChannel+0x238>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d123      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x21e>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b10      	cmp	r3, #16
 80026b4:	d003      	beq.n	80026be <HAL_ADC_ConfigChannel+0x1e6>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b11      	cmp	r3, #17
 80026bc:	d11b      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b10      	cmp	r3, #16
 80026d0:	d111      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80026d2:	4b10      	ldr	r3, [pc, #64]	; (8002714 <HAL_ADC_ConfigChannel+0x23c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a10      	ldr	r2, [pc, #64]	; (8002718 <HAL_ADC_ConfigChannel+0x240>)
 80026d8:	fba2 2303 	umull	r2, r3, r2, r3
 80026dc:	0c9a      	lsrs	r2, r3, #18
 80026de:	4613      	mov	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	4413      	add	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026e8:	e002      	b.n	80026f0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3b01      	subs	r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f9      	bne.n	80026ea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr
 800270c:	40012300 	.word	0x40012300
 8002710:	40012000 	.word	0x40012000
 8002714:	20000008 	.word	0x20000008
 8002718:	431bde83 	.word	0x431bde83

0800271c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b085      	sub	sp, #20
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002724:	4b79      	ldr	r3, [pc, #484]	; (800290c <ADC_Init+0x1f0>)
 8002726:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	685a      	ldr	r2, [r3, #4]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	431a      	orrs	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002750:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6859      	ldr	r1, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	021a      	lsls	r2, r3, #8
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002774:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	430a      	orrs	r2, r1
 8002786:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6899      	ldr	r1, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	4a58      	ldr	r2, [pc, #352]	; (8002910 <ADC_Init+0x1f4>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d022      	beq.n	80027fa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6899      	ldr	r1, [r3, #8]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80027e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	6899      	ldr	r1, [r3, #8]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	e00f      	b.n	800281a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002808:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002818:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0202 	bic.w	r2, r2, #2
 8002828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6899      	ldr	r1, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	7e1b      	ldrb	r3, [r3, #24]
 8002834:	005a      	lsls	r2, r3, #1
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01b      	beq.n	8002880 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002856:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	685a      	ldr	r2, [r3, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002866:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6859      	ldr	r1, [r3, #4]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	3b01      	subs	r3, #1
 8002874:	035a      	lsls	r2, r3, #13
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	605a      	str	r2, [r3, #4]
 800287e:	e007      	b.n	8002890 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800288e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800289e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69db      	ldr	r3, [r3, #28]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	051a      	lsls	r2, r3, #20
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689a      	ldr	r2, [r3, #8]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80028c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	6899      	ldr	r1, [r3, #8]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80028d2:	025a      	lsls	r2, r3, #9
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6899      	ldr	r1, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	695b      	ldr	r3, [r3, #20]
 80028f6:	029a      	lsls	r2, r3, #10
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	609a      	str	r2, [r3, #8]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	40012300 	.word	0x40012300
 8002910:	0f000001 	.word	0x0f000001

08002914 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d13c      	bne.n	80029a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d12b      	bne.n	80029a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800294c:	2b00      	cmp	r3, #0
 800294e:	d127      	bne.n	80029a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002956:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800295a:	2b00      	cmp	r3, #0
 800295c:	d006      	beq.n	800296c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002968:	2b00      	cmp	r3, #0
 800296a:	d119      	bne.n	80029a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0220 	bic.w	r2, r2, #32
 800297a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002980:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d105      	bne.n	80029a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002998:	f043 0201 	orr.w	r2, r3, #1
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80029a0:	68f8      	ldr	r0, [r7, #12]
 80029a2:	f7ff fd7b 	bl	800249c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80029a6:	e00e      	b.n	80029c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ac:	f003 0310 	and.w	r3, r3, #16
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d003      	beq.n	80029bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80029b4:	68f8      	ldr	r0, [r7, #12]
 80029b6:	f7ff fd85 	bl	80024c4 <HAL_ADC_ErrorCallback>
}
 80029ba:	e004      	b.n	80029c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b084      	sub	sp, #16
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80029dc:	68f8      	ldr	r0, [r7, #12]
 80029de:	f7ff fd67 	bl	80024b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029e2:	bf00      	nop
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}

080029ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2240      	movs	r2, #64	; 0x40
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a02:	f043 0204 	orr.w	r2, r3, #4
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f7ff fd5a 	bl	80024c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a10:	bf00      	nop
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b085      	sub	sp, #20
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f003 0307 	and.w	r3, r3, #7
 8002a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a28:	4b0c      	ldr	r3, [pc, #48]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a34:	4013      	ands	r3, r2
 8002a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4a:	4a04      	ldr	r2, [pc, #16]	; (8002a5c <__NVIC_SetPriorityGrouping+0x44>)
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	60d3      	str	r3, [r2, #12]
}
 8002a50:	bf00      	nop
 8002a52:	3714      	adds	r7, #20
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a64:	4b04      	ldr	r3, [pc, #16]	; (8002a78 <__NVIC_GetPriorityGrouping+0x18>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	0a1b      	lsrs	r3, r3, #8
 8002a6a:	f003 0307 	and.w	r3, r3, #7
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00

08002a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	4603      	mov	r3, r0
 8002a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	db0b      	blt.n	8002aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8e:	79fb      	ldrb	r3, [r7, #7]
 8002a90:	f003 021f 	and.w	r2, r3, #31
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <__NVIC_EnableIRQ+0x38>)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	095b      	lsrs	r3, r3, #5
 8002a9c:	2001      	movs	r0, #1
 8002a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	370c      	adds	r7, #12
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	e000e100 	.word	0xe000e100

08002ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	4603      	mov	r3, r0
 8002ac0:	6039      	str	r1, [r7, #0]
 8002ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	db0a      	blt.n	8002ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	490c      	ldr	r1, [pc, #48]	; (8002b04 <__NVIC_SetPriority+0x4c>)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	0112      	lsls	r2, r2, #4
 8002ad8:	b2d2      	uxtb	r2, r2
 8002ada:	440b      	add	r3, r1
 8002adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae0:	e00a      	b.n	8002af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4908      	ldr	r1, [pc, #32]	; (8002b08 <__NVIC_SetPriority+0x50>)
 8002ae8:	79fb      	ldrb	r3, [r7, #7]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	3b04      	subs	r3, #4
 8002af0:	0112      	lsls	r2, r2, #4
 8002af2:	b2d2      	uxtb	r2, r2
 8002af4:	440b      	add	r3, r1
 8002af6:	761a      	strb	r2, [r3, #24]
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr
 8002b04:	e000e100 	.word	0xe000e100
 8002b08:	e000ed00 	.word	0xe000ed00

08002b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b089      	sub	sp, #36	; 0x24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f1c3 0307 	rsb	r3, r3, #7
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	bf28      	it	cs
 8002b2a:	2304      	movcs	r3, #4
 8002b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	3304      	adds	r3, #4
 8002b32:	2b06      	cmp	r3, #6
 8002b34:	d902      	bls.n	8002b3c <NVIC_EncodePriority+0x30>
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	3b03      	subs	r3, #3
 8002b3a:	e000      	b.n	8002b3e <NVIC_EncodePriority+0x32>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b40:	f04f 32ff 	mov.w	r2, #4294967295
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	43da      	mvns	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	401a      	ands	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b54:	f04f 31ff 	mov.w	r1, #4294967295
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5e:	43d9      	mvns	r1, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b64:	4313      	orrs	r3, r2
         );
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3724      	adds	r7, #36	; 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
	...

08002b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b84:	d301      	bcc.n	8002b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00f      	b.n	8002baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <SysTick_Config+0x40>)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b92:	210f      	movs	r1, #15
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f7ff ff8e 	bl	8002ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b9c:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <SysTick_Config+0x40>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba2:	4b04      	ldr	r3, [pc, #16]	; (8002bb4 <SysTick_Config+0x40>)
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	e000e010 	.word	0xe000e010

08002bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc0:	6878      	ldr	r0, [r7, #4]
 8002bc2:	f7ff ff29 	bl	8002a18 <__NVIC_SetPriorityGrouping>
}
 8002bc6:	bf00      	nop
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b086      	sub	sp, #24
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be0:	f7ff ff3e 	bl	8002a60 <__NVIC_GetPriorityGrouping>
 8002be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	6978      	ldr	r0, [r7, #20]
 8002bec:	f7ff ff8e 	bl	8002b0c <NVIC_EncodePriority>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7ff ff5d 	bl	8002ab8 <__NVIC_SetPriority>
}
 8002bfe:	bf00      	nop
 8002c00:	3718      	adds	r7, #24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b082      	sub	sp, #8
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7ff ff31 	bl	8002a7c <__NVIC_EnableIRQ>
}
 8002c1a:	bf00      	nop
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b082      	sub	sp, #8
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f7ff ffa2 	bl	8002b74 <SysTick_Config>
 8002c30:	4603      	mov	r3, r0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c48:	f7ff faa4 	bl	8002194 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e099      	b.n	8002d8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0201 	bic.w	r2, r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c78:	e00f      	b.n	8002c9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c7a:	f7ff fa8b 	bl	8002194 <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b05      	cmp	r3, #5
 8002c86:	d908      	bls.n	8002c9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2220      	movs	r2, #32
 8002c8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2203      	movs	r2, #3
 8002c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e078      	b.n	8002d8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e8      	bne.n	8002c7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	4b38      	ldr	r3, [pc, #224]	; (8002d94 <HAL_DMA_Init+0x158>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002cc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	2b04      	cmp	r3, #4
 8002cf2:	d107      	bne.n	8002d04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	f023 0307 	bic.w	r3, r3, #7
 8002d1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b04      	cmp	r3, #4
 8002d2c:	d117      	bne.n	8002d5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d32:	697a      	ldr	r2, [r7, #20]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fb01 	bl	8003348 <DMA_CheckFifoParam>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2240      	movs	r2, #64	; 0x40
 8002d50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e016      	b.n	8002d8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fab8 	bl	80032dc <DMA_CalcBaseAndBitshift>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	223f      	movs	r2, #63	; 0x3f
 8002d76:	409a      	lsls	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	f010803f 	.word	0xf010803f

08002d98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	607a      	str	r2, [r7, #4]
 8002da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002da6:	2300      	movs	r3, #0
 8002da8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_DMA_Start_IT+0x26>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e040      	b.n	8002e40 <HAL_DMA_Start_IT+0xa8>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d12f      	bne.n	8002e32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f000 fa4a 	bl	8003280 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	223f      	movs	r2, #63	; 0x3f
 8002df2:	409a      	lsls	r2, r3
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0216 	orr.w	r2, r2, #22
 8002e06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d007      	beq.n	8002e20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f042 0208 	orr.w	r2, r2, #8
 8002e1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	e005      	b.n	8002e3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e56:	f7ff f99d 	bl	8002194 <HAL_GetTick>
 8002e5a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d008      	beq.n	8002e7a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e052      	b.n	8002f20 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0216 	bic.w	r2, r2, #22
 8002e88:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695a      	ldr	r2, [r3, #20]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e98:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <HAL_DMA_Abort+0x62>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d007      	beq.n	8002eba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0208 	bic.w	r2, r2, #8
 8002eb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0201 	bic.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002eca:	e013      	b.n	8002ef4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ecc:	f7ff f962 	bl	8002194 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b05      	cmp	r3, #5
 8002ed8:	d90c      	bls.n	8002ef4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2220      	movs	r2, #32
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002ef0:	2303      	movs	r3, #3
 8002ef2:	e015      	b.n	8002f20 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0301 	and.w	r3, r3, #1
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e4      	bne.n	8002ecc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f06:	223f      	movs	r2, #63	; 0x3f
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d004      	beq.n	8002f46 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2280      	movs	r2, #128	; 0x80
 8002f40:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00c      	b.n	8002f60 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2205      	movs	r2, #5
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f78:	4b92      	ldr	r3, [pc, #584]	; (80031c4 <HAL_DMA_IRQHandler+0x258>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a92      	ldr	r2, [pc, #584]	; (80031c8 <HAL_DMA_IRQHandler+0x25c>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0a9b      	lsrs	r3, r3, #10
 8002f84:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f8a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f96:	2208      	movs	r2, #8
 8002f98:	409a      	lsls	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d01a      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d013      	beq.n	8002fd8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0204 	bic.w	r2, r2, #4
 8002fbe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2208      	movs	r2, #8
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fd0:	f043 0201 	orr.w	r2, r3, #1
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fdc:	2201      	movs	r2, #1
 8002fde:	409a      	lsls	r2, r3
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d012      	beq.n	800300e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00b      	beq.n	800300e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	409a      	lsls	r2, r3
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0202 	orr.w	r2, r3, #2
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	2204      	movs	r2, #4
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d012      	beq.n	8003044 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0302 	and.w	r3, r3, #2
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003030:	2204      	movs	r2, #4
 8003032:	409a      	lsls	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800303c:	f043 0204 	orr.w	r2, r3, #4
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003048:	2210      	movs	r2, #16
 800304a:	409a      	lsls	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d043      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b00      	cmp	r3, #0
 8003060:	d03c      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	2210      	movs	r2, #16
 8003068:	409a      	lsls	r2, r3
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d018      	beq.n	80030ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d108      	bne.n	800309c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d024      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	4798      	blx	r3
 800309a:	e01f      	b.n	80030dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d01b      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	4798      	blx	r3
 80030ac:	e016      	b.n	80030dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d107      	bne.n	80030cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0208 	bic.w	r2, r2, #8
 80030ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d003      	beq.n	80030dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030e0:	2220      	movs	r2, #32
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4013      	ands	r3, r2
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 808e 	beq.w	800320a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 8086 	beq.w	800320a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2220      	movs	r2, #32
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b05      	cmp	r3, #5
 8003114:	d136      	bne.n	8003184 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0216 	bic.w	r2, r2, #22
 8003124:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	695a      	ldr	r2, [r3, #20]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003134:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	2b00      	cmp	r3, #0
 800313c:	d103      	bne.n	8003146 <HAL_DMA_IRQHandler+0x1da>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0208 	bic.w	r2, r2, #8
 8003154:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	223f      	movs	r2, #63	; 0x3f
 800315c:	409a      	lsls	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003176:	2b00      	cmp	r3, #0
 8003178:	d07d      	beq.n	8003276 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	4798      	blx	r3
        }
        return;
 8003182:	e078      	b.n	8003276 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01c      	beq.n	80031cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d108      	bne.n	80031b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d030      	beq.n	800320a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e02b      	b.n	800320a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d027      	beq.n	800320a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
 80031c2:	e022      	b.n	800320a <HAL_DMA_IRQHandler+0x29e>
 80031c4:	20000008 	.word	0x20000008
 80031c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d10f      	bne.n	80031fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0210 	bic.w	r2, r2, #16
 80031e8:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d003      	beq.n	800320a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800320e:	2b00      	cmp	r3, #0
 8003210:	d032      	beq.n	8003278 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d022      	beq.n	8003264 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2205      	movs	r2, #5
 8003222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0201 	bic.w	r2, r2, #1
 8003234:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	3301      	adds	r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	429a      	cmp	r2, r3
 8003240:	d307      	bcc.n	8003252 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1f2      	bne.n	8003236 <HAL_DMA_IRQHandler+0x2ca>
 8003250:	e000      	b.n	8003254 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003252:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	4798      	blx	r3
 8003274:	e000      	b.n	8003278 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003276:	bf00      	nop
    }
  }
}
 8003278:	3718      	adds	r7, #24
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop

08003280 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800329c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d108      	bne.n	80032c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68ba      	ldr	r2, [r7, #8]
 80032bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80032be:	e007      	b.n	80032d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]
}
 80032d0:	bf00      	nop
 80032d2:	3714      	adds	r7, #20
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr

080032dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032dc:	b480      	push	{r7}
 80032de:	b085      	sub	sp, #20
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	3b10      	subs	r3, #16
 80032ec:	4a14      	ldr	r2, [pc, #80]	; (8003340 <DMA_CalcBaseAndBitshift+0x64>)
 80032ee:	fba2 2303 	umull	r2, r3, r2, r3
 80032f2:	091b      	lsrs	r3, r3, #4
 80032f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032f6:	4a13      	ldr	r2, [pc, #76]	; (8003344 <DMA_CalcBaseAndBitshift+0x68>)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4413      	add	r3, r2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d909      	bls.n	800331e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003312:	f023 0303 	bic.w	r3, r3, #3
 8003316:	1d1a      	adds	r2, r3, #4
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	659a      	str	r2, [r3, #88]	; 0x58
 800331c:	e007      	b.n	800332e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003326:	f023 0303 	bic.w	r3, r3, #3
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333c:	4770      	bx	lr
 800333e:	bf00      	nop
 8003340:	aaaaaaab 	.word	0xaaaaaaab
 8003344:	080099d0 	.word	0x080099d0

08003348 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003358:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d11f      	bne.n	80033a2 <DMA_CheckFifoParam+0x5a>
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	2b03      	cmp	r3, #3
 8003366:	d856      	bhi.n	8003416 <DMA_CheckFifoParam+0xce>
 8003368:	a201      	add	r2, pc, #4	; (adr r2, 8003370 <DMA_CheckFifoParam+0x28>)
 800336a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336e:	bf00      	nop
 8003370:	08003381 	.word	0x08003381
 8003374:	08003393 	.word	0x08003393
 8003378:	08003381 	.word	0x08003381
 800337c:	08003417 	.word	0x08003417
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d046      	beq.n	800341a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003390:	e043      	b.n	800341a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003396:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800339a:	d140      	bne.n	800341e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a0:	e03d      	b.n	800341e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033aa:	d121      	bne.n	80033f0 <DMA_CheckFifoParam+0xa8>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d837      	bhi.n	8003422 <DMA_CheckFifoParam+0xda>
 80033b2:	a201      	add	r2, pc, #4	; (adr r2, 80033b8 <DMA_CheckFifoParam+0x70>)
 80033b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b8:	080033c9 	.word	0x080033c9
 80033bc:	080033cf 	.word	0x080033cf
 80033c0:	080033c9 	.word	0x080033c9
 80033c4:	080033e1 	.word	0x080033e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	73fb      	strb	r3, [r7, #15]
      break;
 80033cc:	e030      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d025      	beq.n	8003426 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033de:	e022      	b.n	8003426 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033e8:	d11f      	bne.n	800342a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ee:	e01c      	b.n	800342a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d903      	bls.n	80033fe <DMA_CheckFifoParam+0xb6>
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d003      	beq.n	8003404 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033fc:	e018      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	73fb      	strb	r3, [r7, #15]
      break;
 8003402:	e015      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	73fb      	strb	r3, [r7, #15]
      break;
 8003414:	e00b      	b.n	800342e <DMA_CheckFifoParam+0xe6>
      break;
 8003416:	bf00      	nop
 8003418:	e00a      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      break;
 800341a:	bf00      	nop
 800341c:	e008      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      break;
 800341e:	bf00      	nop
 8003420:	e006      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      break;
 8003422:	bf00      	nop
 8003424:	e004      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      break;
 8003426:	bf00      	nop
 8003428:	e002      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      break;   
 800342a:	bf00      	nop
 800342c:	e000      	b.n	8003430 <DMA_CheckFifoParam+0xe8>
      break;
 800342e:	bf00      	nop
    }
  } 
  
  return status; 
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003440:	b480      	push	{r7}
 8003442:	b089      	sub	sp, #36	; 0x24
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800344e:	2300      	movs	r3, #0
 8003450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003456:	2300      	movs	r3, #0
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	e16b      	b.n	8003734 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800345c:	2201      	movs	r2, #1
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4013      	ands	r3, r2
 800346e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	429a      	cmp	r2, r3
 8003476:	f040 815a 	bne.w	800372e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	2b01      	cmp	r3, #1
 8003484:	d005      	beq.n	8003492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800348e:	2b02      	cmp	r3, #2
 8003490:	d130      	bne.n	80034f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	2203      	movs	r2, #3
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	4013      	ands	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034c8:	2201      	movs	r2, #1
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	091b      	lsrs	r3, r3, #4
 80034de:	f003 0201 	and.w	r2, r3, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d017      	beq.n	8003530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4013      	ands	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	69ba      	ldr	r2, [r7, #24]
 8003526:	4313      	orrs	r3, r2
 8003528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	2b02      	cmp	r3, #2
 800353a:	d123      	bne.n	8003584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	08da      	lsrs	r2, r3, #3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3208      	adds	r2, #8
 8003544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	220f      	movs	r2, #15
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	691a      	ldr	r2, [r3, #16]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	08da      	lsrs	r2, r3, #3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3208      	adds	r2, #8
 800357e:	69b9      	ldr	r1, [r7, #24]
 8003580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f003 0203 	and.w	r2, r3, #3
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80b4 	beq.w	800372e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
 80035ca:	4b60      	ldr	r3, [pc, #384]	; (800374c <HAL_GPIO_Init+0x30c>)
 80035cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ce:	4a5f      	ldr	r2, [pc, #380]	; (800374c <HAL_GPIO_Init+0x30c>)
 80035d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035d4:	6453      	str	r3, [r2, #68]	; 0x44
 80035d6:	4b5d      	ldr	r3, [pc, #372]	; (800374c <HAL_GPIO_Init+0x30c>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035e2:	4a5b      	ldr	r2, [pc, #364]	; (8003750 <HAL_GPIO_Init+0x310>)
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	089b      	lsrs	r3, r3, #2
 80035e8:	3302      	adds	r3, #2
 80035ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	220f      	movs	r2, #15
 80035fa:	fa02 f303 	lsl.w	r3, r2, r3
 80035fe:	43db      	mvns	r3, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4013      	ands	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a52      	ldr	r2, [pc, #328]	; (8003754 <HAL_GPIO_Init+0x314>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d02b      	beq.n	8003666 <HAL_GPIO_Init+0x226>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a51      	ldr	r2, [pc, #324]	; (8003758 <HAL_GPIO_Init+0x318>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d025      	beq.n	8003662 <HAL_GPIO_Init+0x222>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a50      	ldr	r2, [pc, #320]	; (800375c <HAL_GPIO_Init+0x31c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01f      	beq.n	800365e <HAL_GPIO_Init+0x21e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a4f      	ldr	r2, [pc, #316]	; (8003760 <HAL_GPIO_Init+0x320>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d019      	beq.n	800365a <HAL_GPIO_Init+0x21a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a4e      	ldr	r2, [pc, #312]	; (8003764 <HAL_GPIO_Init+0x324>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <HAL_GPIO_Init+0x216>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a4d      	ldr	r2, [pc, #308]	; (8003768 <HAL_GPIO_Init+0x328>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00d      	beq.n	8003652 <HAL_GPIO_Init+0x212>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a4c      	ldr	r2, [pc, #304]	; (800376c <HAL_GPIO_Init+0x32c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <HAL_GPIO_Init+0x20e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a4b      	ldr	r2, [pc, #300]	; (8003770 <HAL_GPIO_Init+0x330>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d101      	bne.n	800364a <HAL_GPIO_Init+0x20a>
 8003646:	2307      	movs	r3, #7
 8003648:	e00e      	b.n	8003668 <HAL_GPIO_Init+0x228>
 800364a:	2308      	movs	r3, #8
 800364c:	e00c      	b.n	8003668 <HAL_GPIO_Init+0x228>
 800364e:	2306      	movs	r3, #6
 8003650:	e00a      	b.n	8003668 <HAL_GPIO_Init+0x228>
 8003652:	2305      	movs	r3, #5
 8003654:	e008      	b.n	8003668 <HAL_GPIO_Init+0x228>
 8003656:	2304      	movs	r3, #4
 8003658:	e006      	b.n	8003668 <HAL_GPIO_Init+0x228>
 800365a:	2303      	movs	r3, #3
 800365c:	e004      	b.n	8003668 <HAL_GPIO_Init+0x228>
 800365e:	2302      	movs	r3, #2
 8003660:	e002      	b.n	8003668 <HAL_GPIO_Init+0x228>
 8003662:	2301      	movs	r3, #1
 8003664:	e000      	b.n	8003668 <HAL_GPIO_Init+0x228>
 8003666:	2300      	movs	r3, #0
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f002 0203 	and.w	r2, r2, #3
 800366e:	0092      	lsls	r2, r2, #2
 8003670:	4093      	lsls	r3, r2
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003678:	4935      	ldr	r1, [pc, #212]	; (8003750 <HAL_GPIO_Init+0x310>)
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	089b      	lsrs	r3, r3, #2
 800367e:	3302      	adds	r3, #2
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003686:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_GPIO_Init+0x334>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036aa:	4a32      	ldr	r2, [pc, #200]	; (8003774 <HAL_GPIO_Init+0x334>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036b0:	4b30      	ldr	r3, [pc, #192]	; (8003774 <HAL_GPIO_Init+0x334>)
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036d4:	4a27      	ldr	r2, [pc, #156]	; (8003774 <HAL_GPIO_Init+0x334>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036da:	4b26      	ldr	r3, [pc, #152]	; (8003774 <HAL_GPIO_Init+0x334>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fe:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_GPIO_Init+0x334>)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003704:	4b1b      	ldr	r3, [pc, #108]	; (8003774 <HAL_GPIO_Init+0x334>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003728:	4a12      	ldr	r2, [pc, #72]	; (8003774 <HAL_GPIO_Init+0x334>)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b0f      	cmp	r3, #15
 8003738:	f67f ae90 	bls.w	800345c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	3724      	adds	r7, #36	; 0x24
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	40023800 	.word	0x40023800
 8003750:	40013800 	.word	0x40013800
 8003754:	40020000 	.word	0x40020000
 8003758:	40020400 	.word	0x40020400
 800375c:	40020800 	.word	0x40020800
 8003760:	40020c00 	.word	0x40020c00
 8003764:	40021000 	.word	0x40021000
 8003768:	40021400 	.word	0x40021400
 800376c:	40021800 	.word	0x40021800
 8003770:	40021c00 	.word	0x40021c00
 8003774:	40013c00 	.word	0x40013c00

08003778 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691a      	ldr	r2, [r3, #16]
 8003788:	887b      	ldrh	r3, [r7, #2]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003790:	2301      	movs	r3, #1
 8003792:	73fb      	strb	r3, [r7, #15]
 8003794:	e001      	b.n	800379a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003796:	2300      	movs	r3, #0
 8003798:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b083      	sub	sp, #12
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	807b      	strh	r3, [r7, #2]
 80037b4:	4613      	mov	r3, r2
 80037b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037b8:	787b      	ldrb	r3, [r7, #1]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037be:	887a      	ldrh	r2, [r7, #2]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037c4:	e003      	b.n	80037ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037c6:	887b      	ldrh	r3, [r7, #2]
 80037c8:	041a      	lsls	r2, r3, #16
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	619a      	str	r2, [r3, #24]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
	...

080037dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b084      	sub	sp, #16
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e12b      	b.n	8003a46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd f9d2 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800383e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003840:	f000 fd5c 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 8003844:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	4a81      	ldr	r2, [pc, #516]	; (8003a50 <HAL_I2C_Init+0x274>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d807      	bhi.n	8003860 <HAL_I2C_Init+0x84>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a80      	ldr	r2, [pc, #512]	; (8003a54 <HAL_I2C_Init+0x278>)
 8003854:	4293      	cmp	r3, r2
 8003856:	bf94      	ite	ls
 8003858:	2301      	movls	r3, #1
 800385a:	2300      	movhi	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	e006      	b.n	800386e <HAL_I2C_Init+0x92>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a7d      	ldr	r2, [pc, #500]	; (8003a58 <HAL_I2C_Init+0x27c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	bf94      	ite	ls
 8003868:	2301      	movls	r3, #1
 800386a:	2300      	movhi	r3, #0
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e0e7      	b.n	8003a46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4a78      	ldr	r2, [pc, #480]	; (8003a5c <HAL_I2C_Init+0x280>)
 800387a:	fba2 2303 	umull	r2, r3, r2, r3
 800387e:	0c9b      	lsrs	r3, r3, #18
 8003880:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a1b      	ldr	r3, [r3, #32]
 800389c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a6a      	ldr	r2, [pc, #424]	; (8003a50 <HAL_I2C_Init+0x274>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d802      	bhi.n	80038b0 <HAL_I2C_Init+0xd4>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	3301      	adds	r3, #1
 80038ae:	e009      	b.n	80038c4 <HAL_I2C_Init+0xe8>
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038b6:	fb02 f303 	mul.w	r3, r2, r3
 80038ba:	4a69      	ldr	r2, [pc, #420]	; (8003a60 <HAL_I2C_Init+0x284>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	3301      	adds	r3, #1
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	430b      	orrs	r3, r1
 80038ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80038d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	495c      	ldr	r1, [pc, #368]	; (8003a50 <HAL_I2C_Init+0x274>)
 80038e0:	428b      	cmp	r3, r1
 80038e2:	d819      	bhi.n	8003918 <HAL_I2C_Init+0x13c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e59      	subs	r1, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f2:	1c59      	adds	r1, r3, #1
 80038f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80038f8:	400b      	ands	r3, r1
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00a      	beq.n	8003914 <HAL_I2C_Init+0x138>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1e59      	subs	r1, r3, #1
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	fbb1 f3f3 	udiv	r3, r1, r3
 800390c:	3301      	adds	r3, #1
 800390e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003912:	e051      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003914:	2304      	movs	r3, #4
 8003916:	e04f      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d111      	bne.n	8003944 <HAL_I2C_Init+0x168>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1e58      	subs	r0, r3, #1
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6859      	ldr	r1, [r3, #4]
 8003928:	460b      	mov	r3, r1
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	440b      	add	r3, r1
 800392e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003932:	3301      	adds	r3, #1
 8003934:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003938:	2b00      	cmp	r3, #0
 800393a:	bf0c      	ite	eq
 800393c:	2301      	moveq	r3, #1
 800393e:	2300      	movne	r3, #0
 8003940:	b2db      	uxtb	r3, r3
 8003942:	e012      	b.n	800396a <HAL_I2C_Init+0x18e>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	1e58      	subs	r0, r3, #1
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6859      	ldr	r1, [r3, #4]
 800394c:	460b      	mov	r3, r1
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	0099      	lsls	r1, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	fbb0 f3f3 	udiv	r3, r0, r3
 800395a:	3301      	adds	r3, #1
 800395c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003960:	2b00      	cmp	r3, #0
 8003962:	bf0c      	ite	eq
 8003964:	2301      	moveq	r3, #1
 8003966:	2300      	movne	r3, #0
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_I2C_Init+0x196>
 800396e:	2301      	movs	r3, #1
 8003970:	e022      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10e      	bne.n	8003998 <HAL_I2C_Init+0x1bc>
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	1e58      	subs	r0, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6859      	ldr	r1, [r3, #4]
 8003982:	460b      	mov	r3, r1
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	440b      	add	r3, r1
 8003988:	fbb0 f3f3 	udiv	r3, r0, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	e00f      	b.n	80039b8 <HAL_I2C_Init+0x1dc>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1e58      	subs	r0, r3, #1
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6859      	ldr	r1, [r3, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	0099      	lsls	r1, r3, #2
 80039a8:	440b      	add	r3, r1
 80039aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ae:	3301      	adds	r3, #1
 80039b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80039b8:	6879      	ldr	r1, [r7, #4]
 80039ba:	6809      	ldr	r1, [r1, #0]
 80039bc:	4313      	orrs	r3, r2
 80039be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	431a      	orrs	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80039e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6911      	ldr	r1, [r2, #16]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68d2      	ldr	r2, [r2, #12]
 80039f2:	4311      	orrs	r1, r2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6812      	ldr	r2, [r2, #0]
 80039f8:	430b      	orrs	r3, r1
 80039fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	431a      	orrs	r2, r3
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	430a      	orrs	r2, r1
 8003a16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f042 0201 	orr.w	r2, r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2220      	movs	r2, #32
 8003a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	000186a0 	.word	0x000186a0
 8003a54:	001e847f 	.word	0x001e847f
 8003a58:	003d08ff 	.word	0x003d08ff
 8003a5c:	431bde83 	.word	0x431bde83
 8003a60:	10624dd3 	.word	0x10624dd3

08003a64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e264      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d075      	beq.n	8003b6e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a82:	4ba3      	ldr	r3, [pc, #652]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
 8003a8a:	2b04      	cmp	r3, #4
 8003a8c:	d00c      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a8e:	4ba0      	ldr	r3, [pc, #640]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d112      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a9a:	4b9d      	ldr	r3, [pc, #628]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa8:	4b99      	ldr	r3, [pc, #612]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d05b      	beq.n	8003b6c <HAL_RCC_OscConfig+0x108>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d157      	bne.n	8003b6c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e23f      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ac8:	d106      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x74>
 8003aca:	4b91      	ldr	r3, [pc, #580]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a90      	ldr	r2, [pc, #576]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	e01d      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d10c      	bne.n	8003afc <HAL_RCC_OscConfig+0x98>
 8003ae2:	4b8b      	ldr	r3, [pc, #556]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a8a      	ldr	r2, [pc, #552]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003aec:	6013      	str	r3, [r2, #0]
 8003aee:	4b88      	ldr	r3, [pc, #544]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a87      	ldr	r2, [pc, #540]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af8:	6013      	str	r3, [r2, #0]
 8003afa:	e00b      	b.n	8003b14 <HAL_RCC_OscConfig+0xb0>
 8003afc:	4b84      	ldr	r3, [pc, #528]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a83      	ldr	r2, [pc, #524]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b06:	6013      	str	r3, [r2, #0]
 8003b08:	4b81      	ldr	r3, [pc, #516]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a80      	ldr	r2, [pc, #512]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d013      	beq.n	8003b44 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1c:	f7fe fb3a 	bl	8002194 <HAL_GetTick>
 8003b20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b22:	e008      	b.n	8003b36 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b24:	f7fe fb36 	bl	8002194 <HAL_GetTick>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	2b64      	cmp	r3, #100	; 0x64
 8003b30:	d901      	bls.n	8003b36 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e204      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	4b76      	ldr	r3, [pc, #472]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0f0      	beq.n	8003b24 <HAL_RCC_OscConfig+0xc0>
 8003b42:	e014      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe fb26 	bl	8002194 <HAL_GetTick>
 8003b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4a:	e008      	b.n	8003b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4c:	f7fe fb22 	bl	8002194 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b64      	cmp	r3, #100	; 0x64
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e1f0      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d1f0      	bne.n	8003b4c <HAL_RCC_OscConfig+0xe8>
 8003b6a:	e000      	b.n	8003b6e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d063      	beq.n	8003c42 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b7a:	4b65      	ldr	r3, [pc, #404]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f003 030c 	and.w	r3, r3, #12
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00b      	beq.n	8003b9e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b86:	4b62      	ldr	r3, [pc, #392]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8e:	2b08      	cmp	r3, #8
 8003b90:	d11c      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b92:	4b5f      	ldr	r3, [pc, #380]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d116      	bne.n	8003bcc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b9e:	4b5c      	ldr	r3, [pc, #368]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d001      	beq.n	8003bb6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1c4      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bb6:	4b56      	ldr	r3, [pc, #344]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	00db      	lsls	r3, r3, #3
 8003bc4:	4952      	ldr	r1, [pc, #328]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bca:	e03a      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d020      	beq.n	8003c16 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bd4:	4b4f      	ldr	r3, [pc, #316]	; (8003d14 <HAL_RCC_OscConfig+0x2b0>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bda:	f7fe fadb 	bl	8002194 <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003be0:	e008      	b.n	8003bf4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003be2:	f7fe fad7 	bl	8002194 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e1a5      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	4b46      	ldr	r3, [pc, #280]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0f0      	beq.n	8003be2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c00:	4b43      	ldr	r3, [pc, #268]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	4940      	ldr	r1, [pc, #256]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	600b      	str	r3, [r1, #0]
 8003c14:	e015      	b.n	8003c42 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c16:	4b3f      	ldr	r3, [pc, #252]	; (8003d14 <HAL_RCC_OscConfig+0x2b0>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c1c:	f7fe faba 	bl	8002194 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c24:	f7fe fab6 	bl	8002194 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e184      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	4b36      	ldr	r3, [pc, #216]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0308 	and.w	r3, r3, #8
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d030      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c56:	4b30      	ldr	r3, [pc, #192]	; (8003d18 <HAL_RCC_OscConfig+0x2b4>)
 8003c58:	2201      	movs	r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c5c:	f7fe fa9a 	bl	8002194 <HAL_GetTick>
 8003c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c62:	e008      	b.n	8003c76 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c64:	f7fe fa96 	bl	8002194 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d901      	bls.n	8003c76 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c72:	2303      	movs	r3, #3
 8003c74:	e164      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d0f0      	beq.n	8003c64 <HAL_RCC_OscConfig+0x200>
 8003c82:	e015      	b.n	8003cb0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c84:	4b24      	ldr	r3, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x2b4>)
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c8a:	f7fe fa83 	bl	8002194 <HAL_GetTick>
 8003c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c90:	e008      	b.n	8003ca4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c92:	f7fe fa7f 	bl	8002194 <HAL_GetTick>
 8003c96:	4602      	mov	r2, r0
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	1ad3      	subs	r3, r2, r3
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	d901      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e14d      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1f0      	bne.n	8003c92 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a0 	beq.w	8003dfe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	4b0f      	ldr	r3, [pc, #60]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	4a0e      	ldr	r2, [pc, #56]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cde:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003cea:	2301      	movs	r3, #1
 8003cec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d121      	bne.n	8003d3e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003cfa:	4b08      	ldr	r3, [pc, #32]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a07      	ldr	r2, [pc, #28]	; (8003d1c <HAL_RCC_OscConfig+0x2b8>)
 8003d00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d06:	f7fe fa45 	bl	8002194 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0c:	e011      	b.n	8003d32 <HAL_RCC_OscConfig+0x2ce>
 8003d0e:	bf00      	nop
 8003d10:	40023800 	.word	0x40023800
 8003d14:	42470000 	.word	0x42470000
 8003d18:	42470e80 	.word	0x42470e80
 8003d1c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d20:	f7fe fa38 	bl	8002194 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e106      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	4b85      	ldr	r3, [pc, #532]	; (8003f48 <HAL_RCC_OscConfig+0x4e4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d106      	bne.n	8003d54 <HAL_RCC_OscConfig+0x2f0>
 8003d46:	4b81      	ldr	r3, [pc, #516]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4a:	4a80      	ldr	r2, [pc, #512]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d4c:	f043 0301 	orr.w	r3, r3, #1
 8003d50:	6713      	str	r3, [r2, #112]	; 0x70
 8003d52:	e01c      	b.n	8003d8e <HAL_RCC_OscConfig+0x32a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b05      	cmp	r3, #5
 8003d5a:	d10c      	bne.n	8003d76 <HAL_RCC_OscConfig+0x312>
 8003d5c:	4b7b      	ldr	r3, [pc, #492]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d60:	4a7a      	ldr	r2, [pc, #488]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6713      	str	r3, [r2, #112]	; 0x70
 8003d68:	4b78      	ldr	r3, [pc, #480]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6c:	4a77      	ldr	r2, [pc, #476]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6713      	str	r3, [r2, #112]	; 0x70
 8003d74:	e00b      	b.n	8003d8e <HAL_RCC_OscConfig+0x32a>
 8003d76:	4b75      	ldr	r3, [pc, #468]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a74      	ldr	r2, [pc, #464]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	4b72      	ldr	r3, [pc, #456]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d86:	4a71      	ldr	r2, [pc, #452]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003d88:	f023 0304 	bic.w	r3, r3, #4
 8003d8c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d015      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d96:	f7fe f9fd 	bl	8002194 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe f9f9 	bl	8002194 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0c5      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b65      	ldr	r3, [pc, #404]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCC_OscConfig+0x33a>
 8003dc0:	e014      	b.n	8003dec <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dc2:	f7fe f9e7 	bl	8002194 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dc8:	e00a      	b.n	8003de0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dca:	f7fe f9e3 	bl	8002194 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e0af      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de0:	4b5a      	ldr	r3, [pc, #360]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1ee      	bne.n	8003dca <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dec:	7dfb      	ldrb	r3, [r7, #23]
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d105      	bne.n	8003dfe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003df2:	4b56      	ldr	r3, [pc, #344]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df6:	4a55      	ldr	r2, [pc, #340]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003df8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 809b 	beq.w	8003f3e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e08:	4b50      	ldr	r3, [pc, #320]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 030c 	and.w	r3, r3, #12
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d05c      	beq.n	8003ece <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d141      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b4c      	ldr	r3, [pc, #304]	; (8003f50 <HAL_RCC_OscConfig+0x4ec>)
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e22:	f7fe f9b7 	bl	8002194 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e2a:	f7fe f9b3 	bl	8002194 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e081      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e3c:	4b43      	ldr	r3, [pc, #268]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1f0      	bne.n	8003e2a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	431a      	orrs	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	019b      	lsls	r3, r3, #6
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5e:	085b      	lsrs	r3, r3, #1
 8003e60:	3b01      	subs	r3, #1
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	431a      	orrs	r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6a:	061b      	lsls	r3, r3, #24
 8003e6c:	4937      	ldr	r1, [pc, #220]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e72:	4b37      	ldr	r3, [pc, #220]	; (8003f50 <HAL_RCC_OscConfig+0x4ec>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fe f98c 	bl	8002194 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e80:	f7fe f988 	bl	8002194 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b02      	cmp	r3, #2
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e056      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e92:	4b2e      	ldr	r3, [pc, #184]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0x41c>
 8003e9e:	e04e      	b.n	8003f3e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea0:	4b2b      	ldr	r3, [pc, #172]	; (8003f50 <HAL_RCC_OscConfig+0x4ec>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fe f975 	bl	8002194 <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fe f971 	bl	8002194 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e03f      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec0:	4b22      	ldr	r3, [pc, #136]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d1f0      	bne.n	8003eae <HAL_RCC_OscConfig+0x44a>
 8003ecc:	e037      	b.n	8003f3e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d101      	bne.n	8003eda <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e032      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003eda:	4b1c      	ldr	r3, [pc, #112]	; (8003f4c <HAL_RCC_OscConfig+0x4e8>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	699b      	ldr	r3, [r3, #24]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d028      	beq.n	8003f3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d121      	bne.n	8003f3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d11a      	bne.n	8003f3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f10:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d111      	bne.n	8003f3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	3b01      	subs	r3, #1
 8003f24:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d001      	beq.n	8003f3e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40007000 	.word	0x40007000
 8003f4c:	40023800 	.word	0x40023800
 8003f50:	42470060 	.word	0x42470060

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0cc      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b68      	ldr	r3, [pc, #416]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90c      	bls.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b65      	ldr	r3, [pc, #404]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f7e:	4b63      	ldr	r3, [pc, #396]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0307 	and.w	r3, r3, #7
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d001      	beq.n	8003f90 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0b8      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fa8:	4b59      	ldr	r3, [pc, #356]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a58      	ldr	r2, [pc, #352]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fb2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0308 	and.w	r3, r3, #8
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d005      	beq.n	8003fcc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fc0:	4b53      	ldr	r3, [pc, #332]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	4a52      	ldr	r2, [pc, #328]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fcc:	4b50      	ldr	r3, [pc, #320]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	494d      	ldr	r1, [pc, #308]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d044      	beq.n	8004074 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	4b47      	ldr	r3, [pc, #284]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d119      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e07f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d003      	beq.n	8004012 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800400e:	2b03      	cmp	r3, #3
 8004010:	d107      	bne.n	8004022 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004012:	4b3f      	ldr	r3, [pc, #252]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d109      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401e:	2301      	movs	r3, #1
 8004020:	e06f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004022:	4b3b      	ldr	r3, [pc, #236]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e067      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004032:	4b37      	ldr	r3, [pc, #220]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0203 	bic.w	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	4934      	ldr	r1, [pc, #208]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004044:	f7fe f8a6 	bl	8002194 <HAL_GetTick>
 8004048:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800404a:	e00a      	b.n	8004062 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800404c:	f7fe f8a2 	bl	8002194 <HAL_GetTick>
 8004050:	4602      	mov	r2, r0
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	f241 3288 	movw	r2, #5000	; 0x1388
 800405a:	4293      	cmp	r3, r2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e04f      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004062:	4b2b      	ldr	r3, [pc, #172]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 020c 	and.w	r2, r3, #12
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	429a      	cmp	r2, r3
 8004072:	d1eb      	bne.n	800404c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004074:	4b25      	ldr	r3, [pc, #148]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	683a      	ldr	r2, [r7, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d20c      	bcs.n	800409c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004082:	4b22      	ldr	r3, [pc, #136]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	b2d2      	uxtb	r2, r2
 8004088:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408a:	4b20      	ldr	r3, [pc, #128]	; (800410c <HAL_RCC_ClockConfig+0x1b8>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	683a      	ldr	r2, [r7, #0]
 8004094:	429a      	cmp	r2, r3
 8004096:	d001      	beq.n	800409c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e032      	b.n	8004102 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d008      	beq.n	80040ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040a8:	4b19      	ldr	r3, [pc, #100]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	4916      	ldr	r1, [pc, #88]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0308 	and.w	r3, r3, #8
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040c6:	4b12      	ldr	r3, [pc, #72]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	490e      	ldr	r1, [pc, #56]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040da:	f000 f821 	bl	8004120 <HAL_RCC_GetSysClockFreq>
 80040de:	4602      	mov	r2, r0
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <HAL_RCC_ClockConfig+0x1bc>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f003 030f 	and.w	r3, r3, #15
 80040ea:	490a      	ldr	r1, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x1c0>)
 80040ec:	5ccb      	ldrb	r3, [r1, r3]
 80040ee:	fa22 f303 	lsr.w	r3, r2, r3
 80040f2:	4a09      	ldr	r2, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x1c4>)
 80040f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80040f6:	4b09      	ldr	r3, [pc, #36]	; (800411c <HAL_RCC_ClockConfig+0x1c8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe f806 	bl	800210c <HAL_InitTick>

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	40023c00 	.word	0x40023c00
 8004110:	40023800 	.word	0x40023800
 8004114:	080099b8 	.word	0x080099b8
 8004118:	20000008 	.word	0x20000008
 800411c:	2000000c 	.word	0x2000000c

08004120 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004120:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004124:	b084      	sub	sp, #16
 8004126:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004128:	2300      	movs	r3, #0
 800412a:	607b      	str	r3, [r7, #4]
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	2300      	movs	r3, #0
 8004132:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004138:	4b67      	ldr	r3, [pc, #412]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030c 	and.w	r3, r3, #12
 8004140:	2b08      	cmp	r3, #8
 8004142:	d00d      	beq.n	8004160 <HAL_RCC_GetSysClockFreq+0x40>
 8004144:	2b08      	cmp	r3, #8
 8004146:	f200 80bd 	bhi.w	80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_RCC_GetSysClockFreq+0x34>
 800414e:	2b04      	cmp	r3, #4
 8004150:	d003      	beq.n	800415a <HAL_RCC_GetSysClockFreq+0x3a>
 8004152:	e0b7      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b61      	ldr	r3, [pc, #388]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004156:	60bb      	str	r3, [r7, #8]
       break;
 8004158:	e0b7      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800415a:	4b61      	ldr	r3, [pc, #388]	; (80042e0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800415c:	60bb      	str	r3, [r7, #8]
      break;
 800415e:	e0b4      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004160:	4b5d      	ldr	r3, [pc, #372]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004168:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800416a:	4b5b      	ldr	r3, [pc, #364]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d04d      	beq.n	8004212 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004176:	4b58      	ldr	r3, [pc, #352]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	099b      	lsrs	r3, r3, #6
 800417c:	461a      	mov	r2, r3
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004186:	f04f 0100 	mov.w	r1, #0
 800418a:	ea02 0800 	and.w	r8, r2, r0
 800418e:	ea03 0901 	and.w	r9, r3, r1
 8004192:	4640      	mov	r0, r8
 8004194:	4649      	mov	r1, r9
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	014b      	lsls	r3, r1, #5
 80041a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041a4:	0142      	lsls	r2, r0, #5
 80041a6:	4610      	mov	r0, r2
 80041a8:	4619      	mov	r1, r3
 80041aa:	ebb0 0008 	subs.w	r0, r0, r8
 80041ae:	eb61 0109 	sbc.w	r1, r1, r9
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	018b      	lsls	r3, r1, #6
 80041bc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041c0:	0182      	lsls	r2, r0, #6
 80041c2:	1a12      	subs	r2, r2, r0
 80041c4:	eb63 0301 	sbc.w	r3, r3, r1
 80041c8:	f04f 0000 	mov.w	r0, #0
 80041cc:	f04f 0100 	mov.w	r1, #0
 80041d0:	00d9      	lsls	r1, r3, #3
 80041d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041d6:	00d0      	lsls	r0, r2, #3
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	eb12 0208 	adds.w	r2, r2, r8
 80041e0:	eb43 0309 	adc.w	r3, r3, r9
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	0259      	lsls	r1, r3, #9
 80041ee:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80041f2:	0250      	lsls	r0, r2, #9
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4610      	mov	r0, r2
 80041fa:	4619      	mov	r1, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	461a      	mov	r2, r3
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	f7fb ffe0 	bl	80001c8 <__aeabi_uldivmod>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	4613      	mov	r3, r2
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e04a      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004212:	4b31      	ldr	r3, [pc, #196]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	099b      	lsrs	r3, r3, #6
 8004218:	461a      	mov	r2, r3
 800421a:	f04f 0300 	mov.w	r3, #0
 800421e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004222:	f04f 0100 	mov.w	r1, #0
 8004226:	ea02 0400 	and.w	r4, r2, r0
 800422a:	ea03 0501 	and.w	r5, r3, r1
 800422e:	4620      	mov	r0, r4
 8004230:	4629      	mov	r1, r5
 8004232:	f04f 0200 	mov.w	r2, #0
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	014b      	lsls	r3, r1, #5
 800423c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004240:	0142      	lsls	r2, r0, #5
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	1b00      	subs	r0, r0, r4
 8004248:	eb61 0105 	sbc.w	r1, r1, r5
 800424c:	f04f 0200 	mov.w	r2, #0
 8004250:	f04f 0300 	mov.w	r3, #0
 8004254:	018b      	lsls	r3, r1, #6
 8004256:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800425a:	0182      	lsls	r2, r0, #6
 800425c:	1a12      	subs	r2, r2, r0
 800425e:	eb63 0301 	sbc.w	r3, r3, r1
 8004262:	f04f 0000 	mov.w	r0, #0
 8004266:	f04f 0100 	mov.w	r1, #0
 800426a:	00d9      	lsls	r1, r3, #3
 800426c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004270:	00d0      	lsls	r0, r2, #3
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	1912      	adds	r2, r2, r4
 8004278:	eb45 0303 	adc.w	r3, r5, r3
 800427c:	f04f 0000 	mov.w	r0, #0
 8004280:	f04f 0100 	mov.w	r1, #0
 8004284:	0299      	lsls	r1, r3, #10
 8004286:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800428a:	0290      	lsls	r0, r2, #10
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	461a      	mov	r2, r3
 8004298:	f04f 0300 	mov.w	r3, #0
 800429c:	f7fb ff94 	bl	80001c8 <__aeabi_uldivmod>
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4613      	mov	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	0c1b      	lsrs	r3, r3, #16
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	3301      	adds	r3, #1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	60bb      	str	r3, [r7, #8]
      break;
 80042c2:	e002      	b.n	80042ca <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042c6:	60bb      	str	r3, [r7, #8]
      break;
 80042c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042ca:	68bb      	ldr	r3, [r7, #8]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042d6:	bf00      	nop
 80042d8:	40023800 	.word	0x40023800
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	007a1200 	.word	0x007a1200

080042e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000008 	.word	0x20000008

080042fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004300:	f7ff fff0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b05      	ldr	r3, [pc, #20]	; (800431c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0a9b      	lsrs	r3, r3, #10
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4903      	ldr	r1, [pc, #12]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004318:	4618      	mov	r0, r3
 800431a:	bd80      	pop	{r7, pc}
 800431c:	40023800 	.word	0x40023800
 8004320:	080099c8 	.word	0x080099c8

08004324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004328:	f7ff ffdc 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 800432c:	4602      	mov	r2, r0
 800432e:	4b05      	ldr	r3, [pc, #20]	; (8004344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	0b5b      	lsrs	r3, r3, #13
 8004334:	f003 0307 	and.w	r3, r3, #7
 8004338:	4903      	ldr	r1, [pc, #12]	; (8004348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800433a:	5ccb      	ldrb	r3, [r1, r3]
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004340:	4618      	mov	r0, r3
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40023800 	.word	0x40023800
 8004348:	080099c8 	.word	0x080099c8

0800434c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07b      	b.n	8004456 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004362:	2b00      	cmp	r3, #0
 8004364:	d108      	bne.n	8004378 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800436e:	d009      	beq.n	8004384 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	61da      	str	r2, [r3, #28]
 8004376:	e005      	b.n	8004384 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004390:	b2db      	uxtb	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d106      	bne.n	80043a4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7fd fabc 	bl	800191c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2202      	movs	r2, #2
 80043a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043ba:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80043cc:	431a      	orrs	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043d6:	431a      	orrs	r2, r3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	ea42 0103 	orr.w	r1, r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	430a      	orrs	r2, r1
 800441a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0104 	and.w	r1, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	f003 0210 	and.w	r2, r3, #16
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	430a      	orrs	r2, r1
 8004434:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	69da      	ldr	r2, [r3, #28]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004444:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800445e:	b580      	push	{r7, lr}
 8004460:	b088      	sub	sp, #32
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	603b      	str	r3, [r7, #0]
 800446a:	4613      	mov	r3, r2
 800446c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004478:	2b01      	cmp	r3, #1
 800447a:	d101      	bne.n	8004480 <HAL_SPI_Transmit+0x22>
 800447c:	2302      	movs	r3, #2
 800447e:	e126      	b.n	80046ce <HAL_SPI_Transmit+0x270>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004488:	f7fd fe84 	bl	8002194 <HAL_GetTick>
 800448c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d002      	beq.n	80044a4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800449e:	2302      	movs	r3, #2
 80044a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044a2:	e10b      	b.n	80046bc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_SPI_Transmit+0x52>
 80044aa:	88fb      	ldrh	r3, [r7, #6]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d102      	bne.n	80044b6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80044b4:	e102      	b.n	80046bc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2200      	movs	r2, #0
 80044e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044fc:	d10f      	bne.n	800451e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800450c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800451c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004528:	2b40      	cmp	r3, #64	; 0x40
 800452a:	d007      	beq.n	800453c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800453a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004544:	d14b      	bne.n	80045de <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_SPI_Transmit+0xf6>
 800454e:	8afb      	ldrh	r3, [r7, #22]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d13e      	bne.n	80045d2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004558:	881a      	ldrh	r2, [r3, #0]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	3b01      	subs	r3, #1
 8004572:	b29a      	uxth	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004578:	e02b      	b.n	80045d2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b02      	cmp	r3, #2
 8004586:	d112      	bne.n	80045ae <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458c:	881a      	ldrh	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	1c9a      	adds	r2, r3, #2
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80045ac:	e011      	b.n	80045d2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045ae:	f7fd fdf1 	bl	8002194 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d803      	bhi.n	80045c6 <HAL_SPI_Transmit+0x168>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c4:	d102      	bne.n	80045cc <HAL_SPI_Transmit+0x16e>
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d102      	bne.n	80045d2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80045d0:	e074      	b.n	80046bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1ce      	bne.n	800457a <HAL_SPI_Transmit+0x11c>
 80045dc:	e04c      	b.n	8004678 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_SPI_Transmit+0x18e>
 80045e6:	8afb      	ldrh	r3, [r7, #22]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d140      	bne.n	800466e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	7812      	ldrb	r2, [r2, #0]
 80045f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fe:	1c5a      	adds	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004612:	e02c      	b.n	800466e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b02      	cmp	r3, #2
 8004620:	d113      	bne.n	800464a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	330c      	adds	r3, #12
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	86da      	strh	r2, [r3, #54]	; 0x36
 8004648:	e011      	b.n	800466e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800464a:	f7fd fda3 	bl	8002194 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d803      	bhi.n	8004662 <HAL_SPI_Transmit+0x204>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d102      	bne.n	8004668 <HAL_SPI_Transmit+0x20a>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d102      	bne.n	800466e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800466c:	e026      	b.n	80046bc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1cd      	bne.n	8004614 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	6839      	ldr	r1, [r7, #0]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f8b3 	bl	80047e8 <SPI_EndRxTxTransaction>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10a      	bne.n	80046ac <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004696:	2300      	movs	r3, #0
 8004698:	613b      	str	r3, [r7, #16]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	613b      	str	r3, [r7, #16]
 80046aa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d002      	beq.n	80046ba <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	77fb      	strb	r3, [r7, #31]
 80046b8:	e000      	b.n	80046bc <HAL_SPI_Transmit+0x25e>
  }

error:
 80046ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80046cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3720      	adds	r7, #32
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
	...

080046d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b088      	sub	sp, #32
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	603b      	str	r3, [r7, #0]
 80046e4:	4613      	mov	r3, r2
 80046e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80046e8:	f7fd fd54 	bl	8002194 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	1a9b      	subs	r3, r3, r2
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	4413      	add	r3, r2
 80046f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80046f8:	f7fd fd4c 	bl	8002194 <HAL_GetTick>
 80046fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80046fe:	4b39      	ldr	r3, [pc, #228]	; (80047e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	015b      	lsls	r3, r3, #5
 8004704:	0d1b      	lsrs	r3, r3, #20
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	fb02 f303 	mul.w	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800470e:	e054      	b.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004716:	d050      	beq.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004718:	f7fd fd3c 	bl	8002194 <HAL_GetTick>
 800471c:	4602      	mov	r2, r0
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	69fa      	ldr	r2, [r7, #28]
 8004724:	429a      	cmp	r2, r3
 8004726:	d902      	bls.n	800472e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d13d      	bne.n	80047aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800473c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004746:	d111      	bne.n	800476c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	d004      	beq.n	800475c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800475a:	d107      	bne.n	800476c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800476a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004774:	d10f      	bne.n	8004796 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004794:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e017      	b.n	80047da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047b0:	2300      	movs	r3, #0
 80047b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689a      	ldr	r2, [r3, #8]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	4013      	ands	r3, r2
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	bf0c      	ite	eq
 80047ca:	2301      	moveq	r3, #1
 80047cc:	2300      	movne	r3, #0
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	461a      	mov	r2, r3
 80047d2:	79fb      	ldrb	r3, [r7, #7]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d19b      	bne.n	8004710 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3720      	adds	r7, #32
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	20000008 	.word	0x20000008

080047e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b088      	sub	sp, #32
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <SPI_EndRxTxTransaction+0x7c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1b      	ldr	r2, [pc, #108]	; (8004868 <SPI_EndRxTxTransaction+0x80>)
 80047fa:	fba2 2303 	umull	r2, r3, r2, r3
 80047fe:	0d5b      	lsrs	r3, r3, #21
 8004800:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004812:	d112      	bne.n	800483a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	9300      	str	r3, [sp, #0]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	2180      	movs	r1, #128	; 0x80
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f7ff ff5a 	bl	80046d8 <SPI_WaitFlagStateUntilTimeout>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d016      	beq.n	8004858 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482e:	f043 0220 	orr.w	r2, r3, #32
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e00f      	b.n	800485a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	3b01      	subs	r3, #1
 8004844:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b80      	cmp	r3, #128	; 0x80
 8004852:	d0f2      	beq.n	800483a <SPI_EndRxTxTransaction+0x52>
 8004854:	e000      	b.n	8004858 <SPI_EndRxTxTransaction+0x70>
        break;
 8004856:	bf00      	nop
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	20000008 	.word	0x20000008
 8004868:	165e9f81 	.word	0x165e9f81

0800486c <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	e034      	b.n	80048ec <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d106      	bne.n	800489c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004896:	68f8      	ldr	r0, [r7, #12]
 8004898:	f7fc f816 	bl	80008c8 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	3308      	adds	r3, #8
 80048a4:	4619      	mov	r1, r3
 80048a6:	4610      	mov	r0, r2
 80048a8:	f001 ffa2 	bl	80067f0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6818      	ldr	r0, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	461a      	mov	r2, r3
 80048b6:	68b9      	ldr	r1, [r7, #8]
 80048b8:	f001 ffec 	bl	8006894 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6858      	ldr	r0, [r3, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	f002 f821 	bl	8006910 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	6892      	ldr	r2, [r2, #8]
 80048d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	6892      	ldr	r2, [r2, #8]
 80048e2:	f041 0101 	orr.w	r1, r1, #1
 80048e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	3710      	adds	r7, #16
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e041      	b.n	800498a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f7fd f9bc 	bl	8001c98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fc1a 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3708      	adds	r7, #8
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
	...

08004994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d001      	beq.n	80049ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e046      	b.n	8004a3a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a23      	ldr	r2, [pc, #140]	; (8004a48 <HAL_TIM_Base_Start+0xb4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d022      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c6:	d01d      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_TIM_Base_Start+0xb8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d018      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a1e      	ldr	r2, [pc, #120]	; (8004a50 <HAL_TIM_Base_Start+0xbc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d013      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_TIM_Base_Start+0xc0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d00e      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a1b      	ldr	r2, [pc, #108]	; (8004a58 <HAL_TIM_Base_Start+0xc4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d009      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a19      	ldr	r2, [pc, #100]	; (8004a5c <HAL_TIM_Base_Start+0xc8>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d004      	beq.n	8004a04 <HAL_TIM_Base_Start+0x70>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a18      	ldr	r2, [pc, #96]	; (8004a60 <HAL_TIM_Base_Start+0xcc>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d111      	bne.n	8004a28 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 0307 	and.w	r3, r3, #7
 8004a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b06      	cmp	r3, #6
 8004a14:	d010      	beq.n	8004a38 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0201 	orr.w	r2, r2, #1
 8004a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	e007      	b.n	8004a38 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f042 0201 	orr.w	r2, r2, #1
 8004a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40010000 	.word	0x40010000
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40010400 	.word	0x40010400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40001800 	.word	0x40001800

08004a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d001      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e04e      	b.n	8004b1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d022      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa6:	d01d      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a1f      	ldr	r2, [pc, #124]	; (8004b2c <HAL_TIM_Base_Start_IT+0xc8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d018      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a1e      	ldr	r2, [pc, #120]	; (8004b30 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d013      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <HAL_TIM_Base_Start_IT+0xd0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00e      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1b      	ldr	r2, [pc, #108]	; (8004b38 <HAL_TIM_Base_Start_IT+0xd4>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d009      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a19      	ldr	r2, [pc, #100]	; (8004b3c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d004      	beq.n	8004ae4 <HAL_TIM_Base_Start_IT+0x80>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a18      	ldr	r2, [pc, #96]	; (8004b40 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d111      	bne.n	8004b08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0307 	and.w	r3, r3, #7
 8004aee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2b06      	cmp	r3, #6
 8004af4:	d010      	beq.n	8004b18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0201 	orr.w	r2, r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	e007      	b.n	8004b18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0201 	orr.w	r2, r2, #1
 8004b16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b18:	2300      	movs	r3, #0
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	40010000 	.word	0x40010000
 8004b2c:	40000400 	.word	0x40000400
 8004b30:	40000800 	.word	0x40000800
 8004b34:	40000c00 	.word	0x40000c00
 8004b38:	40010400 	.word	0x40010400
 8004b3c:	40014000 	.word	0x40014000
 8004b40:	40001800 	.word	0x40001800

08004b44 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e041      	b.n	8004bda <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d106      	bne.n	8004b70 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f839 	bl	8004be2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3304      	adds	r3, #4
 8004b80:	4619      	mov	r1, r3
 8004b82:	4610      	mov	r0, r2
 8004b84:	f000 faf2 	bl	800516c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2201      	movs	r2, #1
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}

08004be2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004be2:	b480      	push	{r7}
 8004be4:	b083      	sub	sp, #12
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bea:	bf00      	nop
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bf6:	b580      	push	{r7, lr}
 8004bf8:	b082      	sub	sp, #8
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d122      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d11b      	bne.n	8004c52 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f06f 0202 	mvn.w	r2, #2
 8004c22:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	f003 0303 	and.w	r3, r3, #3
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d003      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fa78 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004c3e:	e005      	b.n	8004c4c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 fa6a 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fa7b 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b04      	cmp	r3, #4
 8004c5e:	d122      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	f003 0304 	and.w	r3, r3, #4
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d11b      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f06f 0204 	mvn.w	r2, #4
 8004c76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d003      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fa4e 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004c92:	e005      	b.n	8004ca0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 fa40 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 fa51 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f003 0308 	and.w	r3, r3, #8
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d122      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0308 	and.w	r3, r3, #8
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d11b      	bne.n	8004cfa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f06f 0208 	mvn.w	r2, #8
 8004cca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2204      	movs	r2, #4
 8004cd0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	69db      	ldr	r3, [r3, #28]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 fa24 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004ce6:	e005      	b.n	8004cf4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f000 fa16 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa27 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d122      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0310 	and.w	r3, r3, #16
 8004d12:	2b10      	cmp	r3, #16
 8004d14:	d11b      	bne.n	8004d4e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f06f 0210 	mvn.w	r2, #16
 8004d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2208      	movs	r2, #8
 8004d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d003      	beq.n	8004d3c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9fa 	bl	800512e <HAL_TIM_IC_CaptureCallback>
 8004d3a:	e005      	b.n	8004d48 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f9ec 	bl	800511a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f000 f9fd 	bl	8005142 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10e      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f06f 0201 	mvn.w	r2, #1
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f7fc fd71 	bl	800185c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b80      	cmp	r3, #128	; 0x80
 8004d86:	d10e      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d92:	2b80      	cmp	r3, #128	; 0x80
 8004d94:	d107      	bne.n	8004da6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fd53 	bl	800584c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b40      	cmp	r3, #64	; 0x40
 8004db2:	d10e      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dbe:	2b40      	cmp	r3, #64	; 0x40
 8004dc0:	d107      	bne.n	8004dd2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dcc:	6878      	ldr	r0, [r7, #4]
 8004dce:	f000 f9c2 	bl	8005156 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b20      	cmp	r3, #32
 8004dde:	d10e      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0320 	and.w	r3, r3, #32
 8004dea:	2b20      	cmp	r3, #32
 8004dec:	d107      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f06f 0220 	mvn.w	r2, #32
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fd1d 	bl	8005838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004dfe:	bf00      	nop
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
	...

08004e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e14:	2300      	movs	r3, #0
 8004e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e1e:	2b01      	cmp	r3, #1
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e22:	2302      	movs	r3, #2
 8004e24:	e0ae      	b.n	8004f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b0c      	cmp	r3, #12
 8004e32:	f200 809f 	bhi.w	8004f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004e36:	a201      	add	r2, pc, #4	; (adr r2, 8004e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e3c:	08004e71 	.word	0x08004e71
 8004e40:	08004f75 	.word	0x08004f75
 8004e44:	08004f75 	.word	0x08004f75
 8004e48:	08004f75 	.word	0x08004f75
 8004e4c:	08004eb1 	.word	0x08004eb1
 8004e50:	08004f75 	.word	0x08004f75
 8004e54:	08004f75 	.word	0x08004f75
 8004e58:	08004f75 	.word	0x08004f75
 8004e5c:	08004ef3 	.word	0x08004ef3
 8004e60:	08004f75 	.word	0x08004f75
 8004e64:	08004f75 	.word	0x08004f75
 8004e68:	08004f75 	.word	0x08004f75
 8004e6c:	08004f33 	.word	0x08004f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68b9      	ldr	r1, [r7, #8]
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fa18 	bl	80052ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	699a      	ldr	r2, [r3, #24]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0208 	orr.w	r2, r2, #8
 8004e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	699a      	ldr	r2, [r3, #24]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0204 	bic.w	r2, r2, #4
 8004e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6999      	ldr	r1, [r3, #24]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	619a      	str	r2, [r3, #24]
      break;
 8004eae:	e064      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fa68 	bl	800538c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6999      	ldr	r1, [r3, #24]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	021a      	lsls	r2, r3, #8
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	619a      	str	r2, [r3, #24]
      break;
 8004ef0:	e043      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68b9      	ldr	r1, [r7, #8]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f000 fabd 	bl	8005478 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	69da      	ldr	r2, [r3, #28]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f042 0208 	orr.w	r2, r2, #8
 8004f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69da      	ldr	r2, [r3, #28]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0204 	bic.w	r2, r2, #4
 8004f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69d9      	ldr	r1, [r3, #28]
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	691a      	ldr	r2, [r3, #16]
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	61da      	str	r2, [r3, #28]
      break;
 8004f30:	e023      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fb11 	bl	8005560 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69d9      	ldr	r1, [r3, #28]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	021a      	lsls	r2, r3, #8
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	61da      	str	r2, [r3, #28]
      break;
 8004f72:	e002      	b.n	8004f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	75fb      	strb	r3, [r7, #23]
      break;
 8004f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3718      	adds	r7, #24
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f96:	2300      	movs	r3, #0
 8004f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0b4      	b.n	8005112 <HAL_TIM_ConfigClockSource+0x186>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe0:	d03e      	beq.n	8005060 <HAL_TIM_ConfigClockSource+0xd4>
 8004fe2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fe6:	f200 8087 	bhi.w	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	f000 8086 	beq.w	80050fe <HAL_TIM_ConfigClockSource+0x172>
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d87f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8004ff8:	2b70      	cmp	r3, #112	; 0x70
 8004ffa:	d01a      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0xa6>
 8004ffc:	2b70      	cmp	r3, #112	; 0x70
 8004ffe:	d87b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005000:	2b60      	cmp	r3, #96	; 0x60
 8005002:	d050      	beq.n	80050a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005004:	2b60      	cmp	r3, #96	; 0x60
 8005006:	d877      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b50      	cmp	r3, #80	; 0x50
 800500a:	d03c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0xfa>
 800500c:	2b50      	cmp	r3, #80	; 0x50
 800500e:	d873      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b40      	cmp	r3, #64	; 0x40
 8005012:	d058      	beq.n	80050c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005014:	2b40      	cmp	r3, #64	; 0x40
 8005016:	d86f      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b30      	cmp	r3, #48	; 0x30
 800501a:	d064      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 800501c:	2b30      	cmp	r3, #48	; 0x30
 800501e:	d86b      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b20      	cmp	r3, #32
 8005022:	d060      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005024:	2b20      	cmp	r3, #32
 8005026:	d867      	bhi.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b00      	cmp	r3, #0
 800502a:	d05c      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b10      	cmp	r3, #16
 800502e:	d05a      	beq.n	80050e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005030:	e062      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6899      	ldr	r1, [r3, #8]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	685a      	ldr	r2, [r3, #4]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f000 fb5d 	bl	8005700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	609a      	str	r2, [r3, #8]
      break;
 800505e:	e04f      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6818      	ldr	r0, [r3, #0]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6899      	ldr	r1, [r3, #8]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	f000 fb46 	bl	8005700 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005082:	609a      	str	r2, [r3, #8]
      break;
 8005084:	e03c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6818      	ldr	r0, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	6859      	ldr	r1, [r3, #4]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	68db      	ldr	r3, [r3, #12]
 8005092:	461a      	mov	r2, r3
 8005094:	f000 faba 	bl	800560c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2150      	movs	r1, #80	; 0x50
 800509e:	4618      	mov	r0, r3
 80050a0:	f000 fb13 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80050a4:	e02c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6818      	ldr	r0, [r3, #0]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	6859      	ldr	r1, [r3, #4]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	68db      	ldr	r3, [r3, #12]
 80050b2:	461a      	mov	r2, r3
 80050b4:	f000 fad9 	bl	800566a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	2160      	movs	r1, #96	; 0x60
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fb03 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80050c4:	e01c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	6859      	ldr	r1, [r3, #4]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	461a      	mov	r2, r3
 80050d4:	f000 fa9a 	bl	800560c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2140      	movs	r1, #64	; 0x40
 80050de:	4618      	mov	r0, r3
 80050e0:	f000 faf3 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80050e4:	e00c      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4619      	mov	r1, r3
 80050f0:	4610      	mov	r0, r2
 80050f2:	f000 faea 	bl	80056ca <TIM_ITRx_SetConfig>
      break;
 80050f6:	e003      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	73fb      	strb	r3, [r7, #15]
      break;
 80050fc:	e000      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80050fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005122:	bf00      	nop
 8005124:	370c      	adds	r7, #12
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr

08005142 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800514a:	bf00      	nop
 800514c:	370c      	adds	r7, #12
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005156:	b480      	push	{r7}
 8005158:	b083      	sub	sp, #12
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
	...

0800516c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800516c:	b480      	push	{r7}
 800516e:	b085      	sub	sp, #20
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a40      	ldr	r2, [pc, #256]	; (8005280 <TIM_Base_SetConfig+0x114>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d013      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a3d      	ldr	r2, [pc, #244]	; (8005284 <TIM_Base_SetConfig+0x118>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3c      	ldr	r2, [pc, #240]	; (8005288 <TIM_Base_SetConfig+0x11c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3b      	ldr	r2, [pc, #236]	; (800528c <TIM_Base_SetConfig+0x120>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x40>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3a      	ldr	r2, [pc, #232]	; (8005290 <TIM_Base_SetConfig+0x124>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a2f      	ldr	r2, [pc, #188]	; (8005280 <TIM_Base_SetConfig+0x114>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d02b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d027      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a2c      	ldr	r2, [pc, #176]	; (8005284 <TIM_Base_SetConfig+0x118>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d023      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2b      	ldr	r2, [pc, #172]	; (8005288 <TIM_Base_SetConfig+0x11c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d01f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2a      	ldr	r2, [pc, #168]	; (800528c <TIM_Base_SetConfig+0x120>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d01b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a29      	ldr	r2, [pc, #164]	; (8005290 <TIM_Base_SetConfig+0x124>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d017      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_Base_SetConfig+0x128>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d013      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_Base_SetConfig+0x12c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d00f      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4a26      	ldr	r2, [pc, #152]	; (800529c <TIM_Base_SetConfig+0x130>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d00b      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <TIM_Base_SetConfig+0x134>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d007      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a24      	ldr	r2, [pc, #144]	; (80052a4 <TIM_Base_SetConfig+0x138>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d003      	beq.n	800521e <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a23      	ldr	r2, [pc, #140]	; (80052a8 <TIM_Base_SetConfig+0x13c>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d108      	bne.n	8005230 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	4313      	orrs	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	695b      	ldr	r3, [r3, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68fa      	ldr	r2, [r7, #12]
 8005242:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	689a      	ldr	r2, [r3, #8]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a0a      	ldr	r2, [pc, #40]	; (8005280 <TIM_Base_SetConfig+0x114>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d003      	beq.n	8005264 <TIM_Base_SetConfig+0xf8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a0c      	ldr	r2, [pc, #48]	; (8005290 <TIM_Base_SetConfig+0x124>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d103      	bne.n	800526c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	615a      	str	r2, [r3, #20]
}
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	40010000 	.word	0x40010000
 8005284:	40000400 	.word	0x40000400
 8005288:	40000800 	.word	0x40000800
 800528c:	40000c00 	.word	0x40000c00
 8005290:	40010400 	.word	0x40010400
 8005294:	40014000 	.word	0x40014000
 8005298:	40014400 	.word	0x40014400
 800529c:	40014800 	.word	0x40014800
 80052a0:	40001800 	.word	0x40001800
 80052a4:	40001c00 	.word	0x40001c00
 80052a8:	40002000 	.word	0x40002000

080052ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	f023 0201 	bic.w	r2, r3, #1
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f023 0302 	bic.w	r3, r3, #2
 80052f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a20      	ldr	r2, [pc, #128]	; (8005384 <TIM_OC1_SetConfig+0xd8>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d003      	beq.n	8005310 <TIM_OC1_SetConfig+0x64>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a1f      	ldr	r2, [pc, #124]	; (8005388 <TIM_OC1_SetConfig+0xdc>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d10c      	bne.n	800532a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	f023 0308 	bic.w	r3, r3, #8
 8005316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f023 0304 	bic.w	r3, r3, #4
 8005328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a15      	ldr	r2, [pc, #84]	; (8005384 <TIM_OC1_SetConfig+0xd8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <TIM_OC1_SetConfig+0x8e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a14      	ldr	r2, [pc, #80]	; (8005388 <TIM_OC1_SetConfig+0xdc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d111      	bne.n	800535e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4313      	orrs	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010000 	.word	0x40010000
 8005388:	40010400 	.word	0x40010400

0800538c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	f023 0210 	bic.w	r2, r3, #16
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a22      	ldr	r2, [pc, #136]	; (8005470 <TIM_OC2_SetConfig+0xe4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC2_SetConfig+0x68>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a21      	ldr	r2, [pc, #132]	; (8005474 <TIM_OC2_SetConfig+0xe8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800540e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a17      	ldr	r2, [pc, #92]	; (8005470 <TIM_OC2_SetConfig+0xe4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_OC2_SetConfig+0x94>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a16      	ldr	r2, [pc, #88]	; (8005474 <TIM_OC2_SetConfig+0xe8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d113      	bne.n	8005448 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005426:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800542e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	693a      	ldr	r2, [r7, #16]
 8005438:	4313      	orrs	r3, r2
 800543a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40010400 	.word	0x40010400

08005478 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005478:	b480      	push	{r7}
 800547a:	b087      	sub	sp, #28
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a1b      	ldr	r3, [r3, #32]
 8005492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f023 0303 	bic.w	r3, r3, #3
 80054ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	021b      	lsls	r3, r3, #8
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a21      	ldr	r2, [pc, #132]	; (8005558 <TIM_OC3_SetConfig+0xe0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d003      	beq.n	80054de <TIM_OC3_SetConfig+0x66>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a20      	ldr	r2, [pc, #128]	; (800555c <TIM_OC3_SetConfig+0xe4>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d10d      	bne.n	80054fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	021b      	lsls	r3, r3, #8
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	4a16      	ldr	r2, [pc, #88]	; (8005558 <TIM_OC3_SetConfig+0xe0>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d003      	beq.n	800550a <TIM_OC3_SetConfig+0x92>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	4a15      	ldr	r2, [pc, #84]	; (800555c <TIM_OC3_SetConfig+0xe4>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d113      	bne.n	8005532 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005510:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005518:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	695b      	ldr	r3, [r3, #20]
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	693a      	ldr	r2, [r7, #16]
 8005522:	4313      	orrs	r3, r2
 8005524:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	693a      	ldr	r2, [r7, #16]
 800552e:	4313      	orrs	r3, r2
 8005530:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	621a      	str	r2, [r3, #32]
}
 800554c:	bf00      	nop
 800554e:	371c      	adds	r7, #28
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	40010000 	.word	0x40010000
 800555c:	40010400 	.word	0x40010400

08005560 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800558e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005596:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	021b      	lsls	r3, r3, #8
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	031b      	lsls	r3, r3, #12
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a12      	ldr	r2, [pc, #72]	; (8005604 <TIM_OC4_SetConfig+0xa4>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d003      	beq.n	80055c8 <TIM_OC4_SetConfig+0x68>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a11      	ldr	r2, [pc, #68]	; (8005608 <TIM_OC4_SetConfig+0xa8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d109      	bne.n	80055dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	019b      	lsls	r3, r3, #6
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	4313      	orrs	r3, r2
 80055da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68fa      	ldr	r2, [r7, #12]
 80055e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	693a      	ldr	r2, [r7, #16]
 80055f4:	621a      	str	r2, [r3, #32]
}
 80055f6:	bf00      	nop
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40010000 	.word	0x40010000
 8005608:	40010400 	.word	0x40010400

0800560c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800560c:	b480      	push	{r7}
 800560e:	b087      	sub	sp, #28
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6a1b      	ldr	r3, [r3, #32]
 8005622:	f023 0201 	bic.w	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005636:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	693a      	ldr	r2, [r7, #16]
 800563e:	4313      	orrs	r3, r2
 8005640:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f023 030a 	bic.w	r3, r3, #10
 8005648:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	4313      	orrs	r3, r2
 8005650:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	60f8      	str	r0, [r7, #12]
 8005672:	60b9      	str	r1, [r7, #8]
 8005674:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	f023 0210 	bic.w	r2, r3, #16
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6a1b      	ldr	r3, [r3, #32]
 800568c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005694:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	031b      	lsls	r3, r3, #12
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	4313      	orrs	r3, r2
 800569e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	011b      	lsls	r3, r3, #4
 80056ac:	693a      	ldr	r2, [r7, #16]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	693a      	ldr	r2, [r7, #16]
 80056bc:	621a      	str	r2, [r3, #32]
}
 80056be:	bf00      	nop
 80056c0:	371c      	adds	r7, #28
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f043 0307 	orr.w	r3, r3, #7
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	68fa      	ldr	r2, [r7, #12]
 80056f2:	609a      	str	r2, [r3, #8]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
 800570c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800571a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	021a      	lsls	r2, r3, #8
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	431a      	orrs	r2, r3
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	697a      	ldr	r2, [r7, #20]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	371c      	adds	r7, #28
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005754:	2302      	movs	r3, #2
 8005756:	e05a      	b.n	800580e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68fa      	ldr	r2, [r7, #12]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a21      	ldr	r2, [pc, #132]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d022      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a4:	d01d      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1d      	ldr	r2, [pc, #116]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d018      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1b      	ldr	r2, [pc, #108]	; (8005824 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d013      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a1a      	ldr	r2, [pc, #104]	; (8005828 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d00e      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a18      	ldr	r2, [pc, #96]	; (800582c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d009      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a17      	ldr	r2, [pc, #92]	; (8005830 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d004      	beq.n	80057e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d10c      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	685b      	ldr	r3, [r3, #4]
 80057ee:	68ba      	ldr	r2, [r7, #8]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	68ba      	ldr	r2, [r7, #8]
 80057fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	40010000 	.word	0x40010000
 8005820:	40000400 	.word	0x40000400
 8005824:	40000800 	.word	0x40000800
 8005828:	40000c00 	.word	0x40000c00
 800582c:	40010400 	.word	0x40010400
 8005830:	40014000 	.word	0x40014000
 8005834:	40001800 	.word	0x40001800

08005838 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e03f      	b.n	80058f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7fc fb68 	bl	8001f5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68da      	ldr	r2, [r3, #12]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fddb 	bl	8006460 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68da      	ldr	r2, [r3, #12]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b08a      	sub	sp, #40	; 0x28
 80058fe:	af02      	add	r7, sp, #8
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b20      	cmp	r3, #32
 8005918:	d17c      	bne.n	8005a14 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <HAL_UART_Transmit+0x2c>
 8005920:	88fb      	ldrh	r3, [r7, #6]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e075      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005930:	2b01      	cmp	r3, #1
 8005932:	d101      	bne.n	8005938 <HAL_UART_Transmit+0x3e>
 8005934:	2302      	movs	r3, #2
 8005936:	e06e      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2221      	movs	r2, #33	; 0x21
 800594a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594e:	f7fc fc21 	bl	8002194 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	88fa      	ldrh	r2, [r7, #6]
 8005958:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	88fa      	ldrh	r2, [r7, #6]
 800595e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005968:	d108      	bne.n	800597c <HAL_UART_Transmit+0x82>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	691b      	ldr	r3, [r3, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d104      	bne.n	800597c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005972:	2300      	movs	r3, #0
 8005974:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	61bb      	str	r3, [r7, #24]
 800597a:	e003      	b.n	8005984 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005980:	2300      	movs	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800598c:	e02a      	b.n	80059e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2200      	movs	r2, #0
 8005996:	2180      	movs	r1, #128	; 0x80
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fb1f 	bl	8005fdc <UART_WaitOnFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e036      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80059a8:	69fb      	ldr	r3, [r7, #28]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d10b      	bne.n	80059c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	881b      	ldrh	r3, [r3, #0]
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3302      	adds	r3, #2
 80059c2:	61bb      	str	r3, [r7, #24]
 80059c4:	e007      	b.n	80059d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	3301      	adds	r3, #1
 80059d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059da:	b29b      	uxth	r3, r3
 80059dc:	3b01      	subs	r3, #1
 80059de:	b29a      	uxth	r2, r3
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1cf      	bne.n	800598e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2140      	movs	r1, #64	; 0x40
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 faef 	bl	8005fdc <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e006      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2220      	movs	r2, #32
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	e000      	b.n	8005a16 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a14:	2302      	movs	r3, #2
  }
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b084      	sub	sp, #16
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	4613      	mov	r3, r2
 8005a2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d11d      	bne.n	8005a74 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d002      	beq.n	8005a44 <HAL_UART_Receive_IT+0x26>
 8005a3e:	88fb      	ldrh	r3, [r7, #6]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d101      	bne.n	8005a48 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e016      	b.n	8005a76 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a4e:	2b01      	cmp	r3, #1
 8005a50:	d101      	bne.n	8005a56 <HAL_UART_Receive_IT+0x38>
 8005a52:	2302      	movs	r3, #2
 8005a54:	e00f      	b.n	8005a76 <HAL_UART_Receive_IT+0x58>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	2201      	movs	r2, #1
 8005a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2200      	movs	r2, #0
 8005a62:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	461a      	mov	r2, r3
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	68f8      	ldr	r0, [r7, #12]
 8005a6c:	f000 fb24 	bl	80060b8 <UART_Start_Receive_IT>
 8005a70:	4603      	mov	r3, r0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3710      	adds	r7, #16
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b0ba      	sub	sp, #232	; 0xe8
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	695b      	ldr	r3, [r3, #20]
 8005aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005aac:	2300      	movs	r3, #0
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005abe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10f      	bne.n	8005ae6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aca:	f003 0320 	and.w	r3, r3, #32
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d009      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
 8005ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad6:	f003 0320 	and.w	r3, r3, #32
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fc03 	bl	80062ea <UART_Receive_IT>
      return;
 8005ae4:	e256      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f000 80de 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
 8005af0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005af4:	f003 0301 	and.w	r3, r3, #1
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d106      	bne.n	8005b0a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 80d1 	beq.w	8005cac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d00b      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
 8005b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d005      	beq.n	8005b2e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b26:	f043 0201 	orr.w	r2, r3, #1
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b32:	f003 0304 	and.w	r3, r3, #4
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d00b      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
 8005b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f043 0202 	orr.w	r2, r3, #2
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b56:	f003 0302 	and.w	r3, r3, #2
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
 8005b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b6e:	f043 0204 	orr.w	r2, r3, #4
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005b76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7a:	f003 0308 	and.w	r3, r3, #8
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d011      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
 8005b82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b86:	f003 0320 	and.w	r3, r3, #32
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d105      	bne.n	8005b9a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d005      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b9e:	f043 0208 	orr.w	r2, r3, #8
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f000 81ed 	beq.w	8005f8a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d008      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
 8005bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc0:	f003 0320 	and.w	r3, r3, #32
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d002      	beq.n	8005bce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb8e 	bl	80062ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	695b      	ldr	r3, [r3, #20]
 8005bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd8:	2b40      	cmp	r3, #64	; 0x40
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	f003 0308 	and.w	r3, r3, #8
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d103      	bne.n	8005bfa <HAL_UART_IRQHandler+0x17a>
 8005bf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d04f      	beq.n	8005c9a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f000 fa96 	bl	800612c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0a:	2b40      	cmp	r3, #64	; 0x40
 8005c0c:	d141      	bne.n	8005c92 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3314      	adds	r3, #20
 8005c14:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c3a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1d9      	bne.n	8005c0e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d013      	beq.n	8005c8a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	4a7d      	ldr	r2, [pc, #500]	; (8005e5c <HAL_UART_IRQHandler+0x3dc>)
 8005c68:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fd f95a 	bl	8002f28 <HAL_DMA_Abort_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d016      	beq.n	8005ca8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c88:	e00e      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f990 	bl	8005fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c90:	e00a      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 f98c 	bl	8005fb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c98:	e006      	b.n	8005ca8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f000 f988 	bl	8005fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005ca6:	e170      	b.n	8005f8a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ca8:	bf00      	nop
    return;
 8005caa:	e16e      	b.n	8005f8a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	2b01      	cmp	r3, #1
 8005cb2:	f040 814a 	bne.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f000 8143 	beq.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	f003 0310 	and.w	r3, r3, #16
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 813c 	beq.w	8005f4a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	60bb      	str	r3, [r7, #8]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	60bb      	str	r3, [r7, #8]
 8005ce6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf2:	2b40      	cmp	r3, #64	; 0x40
 8005cf4:	f040 80b4 	bne.w	8005e60 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005d04:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f000 8140 	beq.w	8005f8e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d16:	429a      	cmp	r2, r3
 8005d18:	f080 8139 	bcs.w	8005f8e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d22:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d2e:	f000 8088 	beq.w	8005e42 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	330c      	adds	r3, #12
 8005d38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d40:	e853 3f00 	ldrex	r3, [r3]
 8005d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	330c      	adds	r3, #12
 8005d5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005d5e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1d9      	bne.n	8005d32 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	3314      	adds	r3, #20
 8005d84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d90:	f023 0301 	bic.w	r3, r3, #1
 8005d94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005da2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005da6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005daa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005dae:	e841 2300 	strex	r3, r2, [r1]
 8005db2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005db4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1e1      	bne.n	8005d7e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	3314      	adds	r3, #20
 8005dc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005dc4:	e853 3f00 	ldrex	r3, [r3]
 8005dc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	3314      	adds	r3, #20
 8005dda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005de0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005de4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e3      	bne.n	8005dba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2220      	movs	r2, #32
 8005df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	330c      	adds	r3, #12
 8005e06:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e0a:	e853 3f00 	ldrex	r3, [r3]
 8005e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e12:	f023 0310 	bic.w	r3, r3, #16
 8005e16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005e24:	65ba      	str	r2, [r7, #88]	; 0x58
 8005e26:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e28:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e2c:	e841 2300 	strex	r3, r2, [r1]
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1e3      	bne.n	8005e00 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fd f803 	bl	8002e48 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	1ad3      	subs	r3, r2, r3
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	4619      	mov	r1, r3
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f8b6 	bl	8005fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e58:	e099      	b.n	8005f8e <HAL_UART_IRQHandler+0x50e>
 8005e5a:	bf00      	nop
 8005e5c:	080061f3 	.word	0x080061f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	f000 808b 	beq.w	8005f92 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 8086 	beq.w	8005f92 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e90:	e853 3f00 	ldrex	r3, [r3]
 8005e94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	330c      	adds	r3, #12
 8005ea6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005eaa:	647a      	str	r2, [r7, #68]	; 0x44
 8005eac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb2:	e841 2300 	strex	r3, r2, [r1]
 8005eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d1e3      	bne.n	8005e86 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	3314      	adds	r3, #20
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	623b      	str	r3, [r7, #32]
   return(result);
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	f023 0301 	bic.w	r3, r3, #1
 8005ed4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3314      	adds	r3, #20
 8005ede:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ee2:	633a      	str	r2, [r7, #48]	; 0x30
 8005ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ee8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e3      	bne.n	8005ebe <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2220      	movs	r2, #32
 8005efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	330c      	adds	r3, #12
 8005f0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	f023 0310 	bic.w	r3, r3, #16
 8005f1a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	330c      	adds	r3, #12
 8005f24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005f28:	61fa      	str	r2, [r7, #28]
 8005f2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2c:	69b9      	ldr	r1, [r7, #24]
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	e841 2300 	strex	r3, r2, [r1]
 8005f34:	617b      	str	r3, [r7, #20]
   return(result);
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d1e3      	bne.n	8005f04 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f40:	4619      	mov	r1, r3
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f83e 	bl	8005fc4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f48:	e023      	b.n	8005f92 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d009      	beq.n	8005f6a <HAL_UART_IRQHandler+0x4ea>
 8005f56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d003      	beq.n	8005f6a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 f959 	bl	800621a <UART_Transmit_IT>
    return;
 8005f68:	e014      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <HAL_UART_IRQHandler+0x514>
 8005f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d008      	beq.n	8005f94 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 f999 	bl	80062ba <UART_EndTransmit_IT>
    return;
 8005f88:	e004      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
    return;
 8005f8a:	bf00      	nop
 8005f8c:	e002      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
      return;
 8005f8e:	bf00      	nop
 8005f90:	e000      	b.n	8005f94 <HAL_UART_IRQHandler+0x514>
      return;
 8005f92:	bf00      	nop
  }
}
 8005f94:	37e8      	adds	r7, #232	; 0xe8
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop

08005f9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005fb8:	bf00      	nop
 8005fba:	370c      	adds	r7, #12
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	460b      	mov	r3, r1
 8005fce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fd0:	bf00      	nop
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b090      	sub	sp, #64	; 0x40
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	603b      	str	r3, [r7, #0]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fec:	e050      	b.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff4:	d04c      	beq.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ff6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d007      	beq.n	800600c <UART_WaitOnFlagUntilTimeout+0x30>
 8005ffc:	f7fc f8ca 	bl	8002194 <HAL_GetTick>
 8006000:	4602      	mov	r2, r0
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	1ad3      	subs	r3, r2, r3
 8006006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006008:	429a      	cmp	r2, r3
 800600a:	d241      	bcs.n	8006090 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006016:	e853 3f00 	ldrex	r3, [r3]
 800601a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006022:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	330c      	adds	r3, #12
 800602a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800602c:	637a      	str	r2, [r7, #52]	; 0x34
 800602e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006034:	e841 2300 	strex	r3, r2, [r1]
 8006038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800603a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1e5      	bne.n	800600c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3314      	adds	r3, #20
 8006046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	613b      	str	r3, [r7, #16]
   return(result);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 0301 	bic.w	r3, r3, #1
 8006056:	63bb      	str	r3, [r7, #56]	; 0x38
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3314      	adds	r3, #20
 800605e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006060:	623a      	str	r2, [r7, #32]
 8006062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	61bb      	str	r3, [r7, #24]
   return(result);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2220      	movs	r2, #32
 8006078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2220      	movs	r2, #32
 8006080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e00f      	b.n	80060b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	4013      	ands	r3, r2
 800609a:	68ba      	ldr	r2, [r7, #8]
 800609c:	429a      	cmp	r2, r3
 800609e:	bf0c      	ite	eq
 80060a0:	2301      	moveq	r3, #1
 80060a2:	2300      	movne	r3, #0
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	461a      	mov	r2, r3
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d09f      	beq.n	8005fee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3740      	adds	r7, #64	; 0x40
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	4613      	mov	r3, r2
 80060c4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	68ba      	ldr	r2, [r7, #8]
 80060ca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	88fa      	ldrh	r2, [r7, #6]
 80060d6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	2222      	movs	r2, #34	; 0x22
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68da      	ldr	r2, [r3, #12]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060fc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	695a      	ldr	r2, [r3, #20]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f042 0201 	orr.w	r2, r2, #1
 800610c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0220 	orr.w	r2, r2, #32
 800611c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800612c:	b480      	push	{r7}
 800612e:	b095      	sub	sp, #84	; 0x54
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	330c      	adds	r3, #12
 800613a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800613c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800613e:	e853 3f00 	ldrex	r3, [r3]
 8006142:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006146:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800614a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	330c      	adds	r3, #12
 8006152:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006154:	643a      	str	r2, [r7, #64]	; 0x40
 8006156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006158:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800615a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800615c:	e841 2300 	strex	r3, r2, [r1]
 8006160:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1e5      	bne.n	8006134 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3314      	adds	r3, #20
 800616e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	e853 3f00 	ldrex	r3, [r3]
 8006176:	61fb      	str	r3, [r7, #28]
   return(result);
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	3314      	adds	r3, #20
 8006186:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006188:	62fa      	str	r2, [r7, #44]	; 0x2c
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800618c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800618e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006190:	e841 2300 	strex	r3, r2, [r1]
 8006194:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	2b00      	cmp	r3, #0
 800619a:	d1e5      	bne.n	8006168 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d119      	bne.n	80061d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	330c      	adds	r3, #12
 80061aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	f023 0310 	bic.w	r3, r3, #16
 80061ba:	647b      	str	r3, [r7, #68]	; 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	330c      	adds	r3, #12
 80061c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061c4:	61ba      	str	r2, [r7, #24]
 80061c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c8:	6979      	ldr	r1, [r7, #20]
 80061ca:	69ba      	ldr	r2, [r7, #24]
 80061cc:	e841 2300 	strex	r3, r2, [r1]
 80061d0:	613b      	str	r3, [r7, #16]
   return(result);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d1e5      	bne.n	80061a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2220      	movs	r2, #32
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2200      	movs	r2, #0
 80061e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061e6:	bf00      	nop
 80061e8:	3754      	adds	r7, #84	; 0x54
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr

080061f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061f2:	b580      	push	{r7, lr}
 80061f4:	b084      	sub	sp, #16
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2200      	movs	r2, #0
 8006204:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800620c:	68f8      	ldr	r0, [r7, #12]
 800620e:	f7ff fecf 	bl	8005fb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006228:	b2db      	uxtb	r3, r3
 800622a:	2b21      	cmp	r3, #33	; 0x21
 800622c:	d13e      	bne.n	80062ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006236:	d114      	bne.n	8006262 <UART_Transmit_IT+0x48>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d110      	bne.n	8006262 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	881b      	ldrh	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006254:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	1c9a      	adds	r2, r3, #2
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	621a      	str	r2, [r3, #32]
 8006260:	e008      	b.n	8006274 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a1b      	ldr	r3, [r3, #32]
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6211      	str	r1, [r2, #32]
 800626c:	781a      	ldrb	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006278:	b29b      	uxth	r3, r3
 800627a:	3b01      	subs	r3, #1
 800627c:	b29b      	uxth	r3, r3
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	4619      	mov	r1, r3
 8006282:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10f      	bne.n	80062a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006296:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68da      	ldr	r2, [r3, #12]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062a8:	2300      	movs	r3, #0
 80062aa:	e000      	b.n	80062ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062ac:	2302      	movs	r3, #2
  }
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3714      	adds	r7, #20
 80062b2:	46bd      	mov	sp, r7
 80062b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b8:	4770      	bx	lr

080062ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b082      	sub	sp, #8
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68da      	ldr	r2, [r3, #12]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2220      	movs	r2, #32
 80062d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff fe5e 	bl	8005f9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062ea:	b580      	push	{r7, lr}
 80062ec:	b08c      	sub	sp, #48	; 0x30
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b22      	cmp	r3, #34	; 0x22
 80062fc:	f040 80ab 	bne.w	8006456 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006308:	d117      	bne.n	800633a <UART_Receive_IT+0x50>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d113      	bne.n	800633a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006312:	2300      	movs	r3, #0
 8006314:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006328:	b29a      	uxth	r2, r3
 800632a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800632c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006332:	1c9a      	adds	r2, r3, #2
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	629a      	str	r2, [r3, #40]	; 0x28
 8006338:	e026      	b.n	8006388 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006340:	2300      	movs	r3, #0
 8006342:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800634c:	d007      	beq.n	800635e <UART_Receive_IT+0x74>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10a      	bne.n	800636c <UART_Receive_IT+0x82>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d106      	bne.n	800636c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	e008      	b.n	800637e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006378:	b2da      	uxtb	r2, r3
 800637a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800637c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	1c5a      	adds	r2, r3, #1
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800638c:	b29b      	uxth	r3, r3
 800638e:	3b01      	subs	r3, #1
 8006390:	b29b      	uxth	r3, r3
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	4619      	mov	r1, r3
 8006396:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006398:	2b00      	cmp	r3, #0
 800639a:	d15a      	bne.n	8006452 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0220 	bic.w	r2, r2, #32
 80063aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68da      	ldr	r2, [r3, #12]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	695a      	ldr	r2, [r3, #20]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f022 0201 	bic.w	r2, r2, #1
 80063ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d135      	bne.n	8006448 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	330c      	adds	r3, #12
 80063e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	e853 3f00 	ldrex	r3, [r3]
 80063f0:	613b      	str	r3, [r7, #16]
   return(result);
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	f023 0310 	bic.w	r3, r3, #16
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	330c      	adds	r3, #12
 8006400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006402:	623a      	str	r2, [r7, #32]
 8006404:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006406:	69f9      	ldr	r1, [r7, #28]
 8006408:	6a3a      	ldr	r2, [r7, #32]
 800640a:	e841 2300 	strex	r3, r2, [r1]
 800640e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1e5      	bne.n	80063e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0310 	and.w	r3, r3, #16
 8006420:	2b10      	cmp	r3, #16
 8006422:	d10a      	bne.n	800643a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff fdbf 	bl	8005fc4 <HAL_UARTEx_RxEventCallback>
 8006446:	e002      	b.n	800644e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f7fb fcd9 	bl	8001e00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800644e:	2300      	movs	r3, #0
 8006450:	e002      	b.n	8006458 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006456:	2302      	movs	r3, #2
  }
}
 8006458:	4618      	mov	r0, r3
 800645a:	3730      	adds	r7, #48	; 0x30
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	b09f      	sub	sp, #124	; 0x7c
 8006466:	af00      	add	r7, sp, #0
 8006468:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800646a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	68d9      	ldr	r1, [r3, #12]
 8006478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	ea40 0301 	orr.w	r3, r0, r1
 8006480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006484:	689a      	ldr	r2, [r3, #8]
 8006486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	431a      	orrs	r2, r3
 800648c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648e:	695b      	ldr	r3, [r3, #20]
 8006490:	431a      	orrs	r2, r3
 8006492:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	4313      	orrs	r3, r2
 8006498:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800649a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064a4:	f021 010c 	bic.w	r1, r1, #12
 80064a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ae:	430b      	orrs	r3, r1
 80064b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80064bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064be:	6999      	ldr	r1, [r3, #24]
 80064c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	ea40 0301 	orr.w	r3, r0, r1
 80064c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80064ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	4bc5      	ldr	r3, [pc, #788]	; (80067e4 <UART_SetConfig+0x384>)
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d004      	beq.n	80064de <UART_SetConfig+0x7e>
 80064d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	4bc3      	ldr	r3, [pc, #780]	; (80067e8 <UART_SetConfig+0x388>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d103      	bne.n	80064e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064de:	f7fd ff21 	bl	8004324 <HAL_RCC_GetPCLK2Freq>
 80064e2:	6778      	str	r0, [r7, #116]	; 0x74
 80064e4:	e002      	b.n	80064ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064e6:	f7fd ff09 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 80064ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ee:	69db      	ldr	r3, [r3, #28]
 80064f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064f4:	f040 80b6 	bne.w	8006664 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064fa:	461c      	mov	r4, r3
 80064fc:	f04f 0500 	mov.w	r5, #0
 8006500:	4622      	mov	r2, r4
 8006502:	462b      	mov	r3, r5
 8006504:	1891      	adds	r1, r2, r2
 8006506:	6439      	str	r1, [r7, #64]	; 0x40
 8006508:	415b      	adcs	r3, r3
 800650a:	647b      	str	r3, [r7, #68]	; 0x44
 800650c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006510:	1912      	adds	r2, r2, r4
 8006512:	eb45 0303 	adc.w	r3, r5, r3
 8006516:	f04f 0000 	mov.w	r0, #0
 800651a:	f04f 0100 	mov.w	r1, #0
 800651e:	00d9      	lsls	r1, r3, #3
 8006520:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006524:	00d0      	lsls	r0, r2, #3
 8006526:	4602      	mov	r2, r0
 8006528:	460b      	mov	r3, r1
 800652a:	1911      	adds	r1, r2, r4
 800652c:	6639      	str	r1, [r7, #96]	; 0x60
 800652e:	416b      	adcs	r3, r5
 8006530:	667b      	str	r3, [r7, #100]	; 0x64
 8006532:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	461a      	mov	r2, r3
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	1891      	adds	r1, r2, r2
 800653e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006540:	415b      	adcs	r3, r3
 8006542:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006544:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006548:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800654c:	f7f9 fe3c 	bl	80001c8 <__aeabi_uldivmod>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4ba5      	ldr	r3, [pc, #660]	; (80067ec <UART_SetConfig+0x38c>)
 8006556:	fba3 2302 	umull	r2, r3, r3, r2
 800655a:	095b      	lsrs	r3, r3, #5
 800655c:	011e      	lsls	r6, r3, #4
 800655e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006560:	461c      	mov	r4, r3
 8006562:	f04f 0500 	mov.w	r5, #0
 8006566:	4622      	mov	r2, r4
 8006568:	462b      	mov	r3, r5
 800656a:	1891      	adds	r1, r2, r2
 800656c:	6339      	str	r1, [r7, #48]	; 0x30
 800656e:	415b      	adcs	r3, r3
 8006570:	637b      	str	r3, [r7, #52]	; 0x34
 8006572:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006576:	1912      	adds	r2, r2, r4
 8006578:	eb45 0303 	adc.w	r3, r5, r3
 800657c:	f04f 0000 	mov.w	r0, #0
 8006580:	f04f 0100 	mov.w	r1, #0
 8006584:	00d9      	lsls	r1, r3, #3
 8006586:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800658a:	00d0      	lsls	r0, r2, #3
 800658c:	4602      	mov	r2, r0
 800658e:	460b      	mov	r3, r1
 8006590:	1911      	adds	r1, r2, r4
 8006592:	65b9      	str	r1, [r7, #88]	; 0x58
 8006594:	416b      	adcs	r3, r5
 8006596:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	461a      	mov	r2, r3
 800659e:	f04f 0300 	mov.w	r3, #0
 80065a2:	1891      	adds	r1, r2, r2
 80065a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80065a6:	415b      	adcs	r3, r3
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065b2:	f7f9 fe09 	bl	80001c8 <__aeabi_uldivmod>
 80065b6:	4602      	mov	r2, r0
 80065b8:	460b      	mov	r3, r1
 80065ba:	4b8c      	ldr	r3, [pc, #560]	; (80067ec <UART_SetConfig+0x38c>)
 80065bc:	fba3 1302 	umull	r1, r3, r3, r2
 80065c0:	095b      	lsrs	r3, r3, #5
 80065c2:	2164      	movs	r1, #100	; 0x64
 80065c4:	fb01 f303 	mul.w	r3, r1, r3
 80065c8:	1ad3      	subs	r3, r2, r3
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	3332      	adds	r3, #50	; 0x32
 80065ce:	4a87      	ldr	r2, [pc, #540]	; (80067ec <UART_SetConfig+0x38c>)
 80065d0:	fba2 2303 	umull	r2, r3, r2, r3
 80065d4:	095b      	lsrs	r3, r3, #5
 80065d6:	005b      	lsls	r3, r3, #1
 80065d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065dc:	441e      	add	r6, r3
 80065de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065e0:	4618      	mov	r0, r3
 80065e2:	f04f 0100 	mov.w	r1, #0
 80065e6:	4602      	mov	r2, r0
 80065e8:	460b      	mov	r3, r1
 80065ea:	1894      	adds	r4, r2, r2
 80065ec:	623c      	str	r4, [r7, #32]
 80065ee:	415b      	adcs	r3, r3
 80065f0:	627b      	str	r3, [r7, #36]	; 0x24
 80065f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065f6:	1812      	adds	r2, r2, r0
 80065f8:	eb41 0303 	adc.w	r3, r1, r3
 80065fc:	f04f 0400 	mov.w	r4, #0
 8006600:	f04f 0500 	mov.w	r5, #0
 8006604:	00dd      	lsls	r5, r3, #3
 8006606:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800660a:	00d4      	lsls	r4, r2, #3
 800660c:	4622      	mov	r2, r4
 800660e:	462b      	mov	r3, r5
 8006610:	1814      	adds	r4, r2, r0
 8006612:	653c      	str	r4, [r7, #80]	; 0x50
 8006614:	414b      	adcs	r3, r1
 8006616:	657b      	str	r3, [r7, #84]	; 0x54
 8006618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	461a      	mov	r2, r3
 800661e:	f04f 0300 	mov.w	r3, #0
 8006622:	1891      	adds	r1, r2, r2
 8006624:	61b9      	str	r1, [r7, #24]
 8006626:	415b      	adcs	r3, r3
 8006628:	61fb      	str	r3, [r7, #28]
 800662a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800662e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006632:	f7f9 fdc9 	bl	80001c8 <__aeabi_uldivmod>
 8006636:	4602      	mov	r2, r0
 8006638:	460b      	mov	r3, r1
 800663a:	4b6c      	ldr	r3, [pc, #432]	; (80067ec <UART_SetConfig+0x38c>)
 800663c:	fba3 1302 	umull	r1, r3, r3, r2
 8006640:	095b      	lsrs	r3, r3, #5
 8006642:	2164      	movs	r1, #100	; 0x64
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	3332      	adds	r3, #50	; 0x32
 800664e:	4a67      	ldr	r2, [pc, #412]	; (80067ec <UART_SetConfig+0x38c>)
 8006650:	fba2 2303 	umull	r2, r3, r2, r3
 8006654:	095b      	lsrs	r3, r3, #5
 8006656:	f003 0207 	and.w	r2, r3, #7
 800665a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4432      	add	r2, r6
 8006660:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006662:	e0b9      	b.n	80067d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006664:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006666:	461c      	mov	r4, r3
 8006668:	f04f 0500 	mov.w	r5, #0
 800666c:	4622      	mov	r2, r4
 800666e:	462b      	mov	r3, r5
 8006670:	1891      	adds	r1, r2, r2
 8006672:	6139      	str	r1, [r7, #16]
 8006674:	415b      	adcs	r3, r3
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800667c:	1912      	adds	r2, r2, r4
 800667e:	eb45 0303 	adc.w	r3, r5, r3
 8006682:	f04f 0000 	mov.w	r0, #0
 8006686:	f04f 0100 	mov.w	r1, #0
 800668a:	00d9      	lsls	r1, r3, #3
 800668c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006690:	00d0      	lsls	r0, r2, #3
 8006692:	4602      	mov	r2, r0
 8006694:	460b      	mov	r3, r1
 8006696:	eb12 0804 	adds.w	r8, r2, r4
 800669a:	eb43 0905 	adc.w	r9, r3, r5
 800669e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	4618      	mov	r0, r3
 80066a4:	f04f 0100 	mov.w	r1, #0
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	008b      	lsls	r3, r1, #2
 80066b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066b6:	0082      	lsls	r2, r0, #2
 80066b8:	4640      	mov	r0, r8
 80066ba:	4649      	mov	r1, r9
 80066bc:	f7f9 fd84 	bl	80001c8 <__aeabi_uldivmod>
 80066c0:	4602      	mov	r2, r0
 80066c2:	460b      	mov	r3, r1
 80066c4:	4b49      	ldr	r3, [pc, #292]	; (80067ec <UART_SetConfig+0x38c>)
 80066c6:	fba3 2302 	umull	r2, r3, r3, r2
 80066ca:	095b      	lsrs	r3, r3, #5
 80066cc:	011e      	lsls	r6, r3, #4
 80066ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d0:	4618      	mov	r0, r3
 80066d2:	f04f 0100 	mov.w	r1, #0
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	1894      	adds	r4, r2, r2
 80066dc:	60bc      	str	r4, [r7, #8]
 80066de:	415b      	adcs	r3, r3
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066e6:	1812      	adds	r2, r2, r0
 80066e8:	eb41 0303 	adc.w	r3, r1, r3
 80066ec:	f04f 0400 	mov.w	r4, #0
 80066f0:	f04f 0500 	mov.w	r5, #0
 80066f4:	00dd      	lsls	r5, r3, #3
 80066f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066fa:	00d4      	lsls	r4, r2, #3
 80066fc:	4622      	mov	r2, r4
 80066fe:	462b      	mov	r3, r5
 8006700:	1814      	adds	r4, r2, r0
 8006702:	64bc      	str	r4, [r7, #72]	; 0x48
 8006704:	414b      	adcs	r3, r1
 8006706:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	4618      	mov	r0, r3
 800670e:	f04f 0100 	mov.w	r1, #0
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	008b      	lsls	r3, r1, #2
 800671c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006720:	0082      	lsls	r2, r0, #2
 8006722:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006726:	f7f9 fd4f 	bl	80001c8 <__aeabi_uldivmod>
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	4b2f      	ldr	r3, [pc, #188]	; (80067ec <UART_SetConfig+0x38c>)
 8006730:	fba3 1302 	umull	r1, r3, r3, r2
 8006734:	095b      	lsrs	r3, r3, #5
 8006736:	2164      	movs	r1, #100	; 0x64
 8006738:	fb01 f303 	mul.w	r3, r1, r3
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	011b      	lsls	r3, r3, #4
 8006740:	3332      	adds	r3, #50	; 0x32
 8006742:	4a2a      	ldr	r2, [pc, #168]	; (80067ec <UART_SetConfig+0x38c>)
 8006744:	fba2 2303 	umull	r2, r3, r2, r3
 8006748:	095b      	lsrs	r3, r3, #5
 800674a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800674e:	441e      	add	r6, r3
 8006750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006752:	4618      	mov	r0, r3
 8006754:	f04f 0100 	mov.w	r1, #0
 8006758:	4602      	mov	r2, r0
 800675a:	460b      	mov	r3, r1
 800675c:	1894      	adds	r4, r2, r2
 800675e:	603c      	str	r4, [r7, #0]
 8006760:	415b      	adcs	r3, r3
 8006762:	607b      	str	r3, [r7, #4]
 8006764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006768:	1812      	adds	r2, r2, r0
 800676a:	eb41 0303 	adc.w	r3, r1, r3
 800676e:	f04f 0400 	mov.w	r4, #0
 8006772:	f04f 0500 	mov.w	r5, #0
 8006776:	00dd      	lsls	r5, r3, #3
 8006778:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800677c:	00d4      	lsls	r4, r2, #3
 800677e:	4622      	mov	r2, r4
 8006780:	462b      	mov	r3, r5
 8006782:	eb12 0a00 	adds.w	sl, r2, r0
 8006786:	eb43 0b01 	adc.w	fp, r3, r1
 800678a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	4618      	mov	r0, r3
 8006790:	f04f 0100 	mov.w	r1, #0
 8006794:	f04f 0200 	mov.w	r2, #0
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	008b      	lsls	r3, r1, #2
 800679e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067a2:	0082      	lsls	r2, r0, #2
 80067a4:	4650      	mov	r0, sl
 80067a6:	4659      	mov	r1, fp
 80067a8:	f7f9 fd0e 	bl	80001c8 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b0e      	ldr	r3, [pc, #56]	; (80067ec <UART_SetConfig+0x38c>)
 80067b2:	fba3 1302 	umull	r1, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	2164      	movs	r1, #100	; 0x64
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	011b      	lsls	r3, r3, #4
 80067c2:	3332      	adds	r3, #50	; 0x32
 80067c4:	4a09      	ldr	r2, [pc, #36]	; (80067ec <UART_SetConfig+0x38c>)
 80067c6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f003 020f 	and.w	r2, r3, #15
 80067d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4432      	add	r2, r6
 80067d6:	609a      	str	r2, [r3, #8]
}
 80067d8:	bf00      	nop
 80067da:	377c      	adds	r7, #124	; 0x7c
 80067dc:	46bd      	mov	sp, r7
 80067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	bf00      	nop
 80067e4:	40011000 	.word	0x40011000
 80067e8:	40011400 	.word	0x40011400
 80067ec:	51eb851f 	.word	0x51eb851f

080067f0 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 80067f0:	b480      	push	{r7}
 80067f2:	b085      	sub	sp, #20
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	4b20      	ldr	r3, [pc, #128]	; (8006890 <FSMC_NORSRAM_Init+0xa0>)
 800680e:	4013      	ands	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800681a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006820:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006826:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800682c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006832:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006838:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800683e:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006844:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800684a:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006850:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006856:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 800685c:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	4313      	orrs	r3, r2
 8006862:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	2b08      	cmp	r3, #8
 800686a:	d103      	bne.n	8006874 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006872:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	681a      	ldr	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68f9      	ldr	r1, [r7, #12]
 800687c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	fff00080 	.word	0xfff00080

08006894 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006894:	b480      	push	{r7}
 8006896:	b087      	sub	sp, #28
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80068b6:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80068c2:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 80068ca:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 80068d2:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	3b01      	subs	r3, #1
 80068da:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 80068dc:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	695b      	ldr	r3, [r3, #20]
 80068e2:	3b02      	subs	r3, #2
 80068e4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80068e6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80068ec:	4313      	orrs	r3, r2
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6979      	ldr	r1, [r7, #20]
 80068fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
	...

08006910 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	60f8      	str	r0, [r7, #12]
 8006918:	60b9      	str	r1, [r7, #8]
 800691a:	607a      	str	r2, [r7, #4]
 800691c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800691e:	2300      	movs	r3, #0
 8006920:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006928:	d122      	bne.n	8006970 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	687a      	ldr	r2, [r7, #4]
 800692e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006932:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006934:	697a      	ldr	r2, [r7, #20]
 8006936:	4b15      	ldr	r3, [pc, #84]	; (800698c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006938:	4013      	ands	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006946:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800694e:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	68db      	ldr	r3, [r3, #12]
 8006954:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006956:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800695c:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800695e:	697a      	ldr	r2, [r7, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	6979      	ldr	r1, [r7, #20]
 800696a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800696e:	e005      	b.n	800697c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006978:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	371c      	adds	r7, #28
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	cff00000 	.word	0xcff00000

08006990 <__libc_init_array>:
 8006990:	b570      	push	{r4, r5, r6, lr}
 8006992:	4d0d      	ldr	r5, [pc, #52]	; (80069c8 <__libc_init_array+0x38>)
 8006994:	4c0d      	ldr	r4, [pc, #52]	; (80069cc <__libc_init_array+0x3c>)
 8006996:	1b64      	subs	r4, r4, r5
 8006998:	10a4      	asrs	r4, r4, #2
 800699a:	2600      	movs	r6, #0
 800699c:	42a6      	cmp	r6, r4
 800699e:	d109      	bne.n	80069b4 <__libc_init_array+0x24>
 80069a0:	4d0b      	ldr	r5, [pc, #44]	; (80069d0 <__libc_init_array+0x40>)
 80069a2:	4c0c      	ldr	r4, [pc, #48]	; (80069d4 <__libc_init_array+0x44>)
 80069a4:	f000 f82e 	bl	8006a04 <_init>
 80069a8:	1b64      	subs	r4, r4, r5
 80069aa:	10a4      	asrs	r4, r4, #2
 80069ac:	2600      	movs	r6, #0
 80069ae:	42a6      	cmp	r6, r4
 80069b0:	d105      	bne.n	80069be <__libc_init_array+0x2e>
 80069b2:	bd70      	pop	{r4, r5, r6, pc}
 80069b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b8:	4798      	blx	r3
 80069ba:	3601      	adds	r6, #1
 80069bc:	e7ee      	b.n	800699c <__libc_init_array+0xc>
 80069be:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c2:	4798      	blx	r3
 80069c4:	3601      	adds	r6, #1
 80069c6:	e7f2      	b.n	80069ae <__libc_init_array+0x1e>
 80069c8:	080099e0 	.word	0x080099e0
 80069cc:	080099e0 	.word	0x080099e0
 80069d0:	080099e0 	.word	0x080099e0
 80069d4:	080099e4 	.word	0x080099e4

080069d8 <memcpy>:
 80069d8:	440a      	add	r2, r1
 80069da:	4291      	cmp	r1, r2
 80069dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80069e0:	d100      	bne.n	80069e4 <memcpy+0xc>
 80069e2:	4770      	bx	lr
 80069e4:	b510      	push	{r4, lr}
 80069e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069ee:	4291      	cmp	r1, r2
 80069f0:	d1f9      	bne.n	80069e6 <memcpy+0xe>
 80069f2:	bd10      	pop	{r4, pc}

080069f4 <memset>:
 80069f4:	4402      	add	r2, r0
 80069f6:	4603      	mov	r3, r0
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d100      	bne.n	80069fe <memset+0xa>
 80069fc:	4770      	bx	lr
 80069fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006a02:	e7f9      	b.n	80069f8 <memset+0x4>

08006a04 <_init>:
 8006a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a06:	bf00      	nop
 8006a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a0a:	bc08      	pop	{r3}
 8006a0c:	469e      	mov	lr, r3
 8006a0e:	4770      	bx	lr

08006a10 <_fini>:
 8006a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a12:	bf00      	nop
 8006a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a16:	bc08      	pop	{r3}
 8006a18:	469e      	mov	lr, r3
 8006a1a:	4770      	bx	lr
